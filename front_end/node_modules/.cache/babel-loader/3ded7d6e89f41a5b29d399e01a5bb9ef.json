{"ast":null,"code":"\"use strict\";\n\nconst NumericN = require('./numericn');\n\nmodule.exports = {\n  id: 0x3F,\n  type: 'NUMERIC',\n  name: 'Numeric',\n  hasPrecision: true,\n  hasScale: true,\n  declaration: function declaration(parameter) {\n    return 'numeric(' + this.resolvePrecision(parameter) + ', ' + this.resolveScale(parameter) + ')';\n  },\n  resolvePrecision: function resolvePrecision(parameter) {\n    if (parameter.precision != null) {\n      return parameter.precision;\n    } else if (parameter.value === null) {\n      return 1;\n    } else {\n      return 18;\n    }\n  },\n  resolveScale: function resolveScale(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else {\n      return 0;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(NumericN.id);\n\n    if (parameter.precision <= 9) {\n      buffer.writeUInt8(5);\n    } else if (parameter.precision <= 19) {\n      buffer.writeUInt8(9);\n    } else if (parameter.precision <= 28) {\n      buffer.writeUInt8(13);\n    } else {\n      buffer.writeUInt8(17);\n    }\n\n    buffer.writeUInt8(parameter.precision);\n    buffer.writeUInt8(parameter.scale);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter) {\n    if (parameter.value != null) {\n      const sign = parameter.value < 0 ? 0 : 1;\n      const value = Math.round(Math.abs(parameter.value * Math.pow(10, parameter.scale)));\n\n      if (parameter.precision <= 9) {\n        buffer.writeUInt8(5);\n        buffer.writeUInt8(sign);\n        buffer.writeUInt32LE(value);\n      } else if (parameter.precision <= 19) {\n        buffer.writeUInt8(9);\n        buffer.writeUInt8(sign);\n        buffer.writeUInt64LE(value);\n      } else if (parameter.precision <= 28) {\n        buffer.writeUInt8(13);\n        buffer.writeUInt8(sign);\n        buffer.writeUInt64LE(value);\n        buffer.writeUInt32LE(0x00000000);\n      } else {\n        buffer.writeUInt8(17);\n        buffer.writeUInt8(sign);\n        buffer.writeUInt64LE(value);\n        buffer.writeUInt32LE(0x00000000);\n        buffer.writeUInt32LE(0x00000000);\n      }\n    } else {\n      buffer.writeUInt8(0);\n    }\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    value = parseFloat(value);\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    return value;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}