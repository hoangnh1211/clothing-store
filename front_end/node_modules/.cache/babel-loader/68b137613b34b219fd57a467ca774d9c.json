{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('./utils');\n\nconst sequelizeError = require('./errors');\n\nconst Promise = require('./promise');\n\nconst DataTypes = require('./data-types');\n\nconst BelongsTo = require('./associations/belongs-to');\n\nconst validator = require('./utils/validator-extras').validator;\n/**\n * Instance Validator.\n *\n * @param {Instance} modelInstance The model instance.\n * @param {Object} options A dictionary with options.\n *\n * @private\n */\n\n\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = _.clone(options) || {};\n\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } // assign defined and default options\n\n\n    this.options = _.defaults(options, {\n      skip: [],\n      hooks: true\n    });\n    this.modelInstance = modelInstance;\n    /**\n     * Exposes a reference to validator.js. This allows you to add custom validations using `validator.extend`\n     * @name validator\n     * @private\n     */\n\n    this.validator = validator;\n    /**\n     *  All errors will be stored here from the validations.\n     *\n     * @type {Array} Will contain keys that correspond to attributes which will\n     *   be Arrays of Errors.\n     * @private\n     */\n\n    this.errors = [];\n    /**\n     * @type {boolean} Indicates if validations are in progress\n     * @private\n     */\n\n    this.inProgress = false;\n  }\n  /**\n   * The main entry point for the Validation module, invoke to start the dance.\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  _validate() {\n    if (this.inProgress) throw new Error('Validations already in progress.');\n    this.inProgress = true;\n    return Promise.all([this._perAttributeValidators().reflect(), this._customValidators().reflect()]).then(() => {\n      if (this.errors.length) {\n        throw new sequelizeError.ValidationError(null, this.errors);\n      }\n    });\n  }\n  /**\n   * Invoke the Validation sequence and run validation hooks if defined\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  validate() {\n    return this.options.hooks ? this._validateAndRunHooks() : this._validate();\n  }\n  /**\n   * Invoke the Validation sequence and run hooks\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    return runHooks('beforeValidate', this.modelInstance, this.options).then(() => this._validate().catch(error => runHooks('validationFailed', this.modelInstance, this.options, error).then(newError => {\n      throw newError || error;\n    }))).then(() => runHooks('afterValidate', this.modelInstance, this.options)).return(this.modelInstance);\n  }\n  /**\n   * Will run all the validators defined per attribute (built-in validators and custom validators)\n   *\n   * @returns {Promise<Array.<Promise.PromiseInspection>>} A promise from .reflect().\n   * @private\n   */\n\n\n  _perAttributeValidators() {\n    // promisify all attribute invocations\n    const validators = [];\n\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n\n      const value = this.modelInstance.dataValues[field];\n\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        // perform validations based on schema\n        this._validateSchema(rawAttribute, field, value);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull).reflect());\n      }\n    });\n\n    return Promise.all(validators);\n  }\n  /**\n   * Will run all the custom validators defined in the model's options.\n   *\n   * @returns {Promise<Array.<Promise.PromiseInspection>>} A promise from .reflect().\n   * @private\n   */\n\n\n  _customValidators() {\n    const validators = [];\n\n    _.each(this.modelInstance._modelOptions.validate, (validator, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n\n      const valprom = this._invokeCustomValidator(validator, validatorType) // errors are handled in settling, stub this\n      .catch(() => {}).reflect();\n\n      validators.push(valprom);\n    });\n\n    return Promise.all(validators);\n  }\n  /**\n   * Validate a single attribute with all the defined built-in validators and custom validators.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {string} field The field name.\n   * @param {boolean} allowNull Whether or not the schema allows null values\n   *\n   * @returns {Promise} A promise, will always resolve, auto populates error on this.error local object.\n   */\n\n\n  _singleAttrValidate(value, field, allowNull) {\n    // If value is null and allowNull is false, no validators should run (see #9143)\n    if ((value === null || value === undefined) && !allowNull) {\n      // The schema validator (_validateSchema) has already generated the validation error. Nothing to do here.\n      return Promise.resolve();\n    } // Promisify each validator\n\n\n    const validators = [];\n\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n      if (validatorType === 'isUrl' || validatorType === 'isURL' || validatorType === 'isEmail') {\n        // Preserve backwards compat. Validator.js now expects the second param to isURL and isEmail to be an object\n        if (typeof test === 'object' && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      } // Custom validators should always run, except if value is null and allowNull is false (see #9143)\n\n\n      if (typeof test === 'function') {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field).reflect());\n        return;\n      } // If value is null, built-in validators should not run (only custom validators have to run) (see #9134).\n\n\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field); // errors are handled in settling, stub this\n\n\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise.reflect());\n    });\n\n    return Promise.all(validators).then(results => this._handleReflectedResult(field, value, results));\n  }\n  /**\n   * Prepare and invoke a custom validator.\n   *\n   * @private\n   *\n   * @param {Function} validator The custom validator.\n   * @param {string} validatorType the custom validator type (name).\n   * @param {boolean} optAttrDefined Set to true if custom validator was defined from the attribute\n   * @param {*} optValue value for attribute\n   * @param {string} optField field for attribute\n   *\n   * @returns {Promise} A promise.\n   */\n\n\n  _invokeCustomValidator(validator, validatorType, optAttrDefined, optValue, optField) {\n    let validatorFunction = null; // the validation function to call\n\n    let isAsync = false;\n    const validatorArity = validator.length; // check if validator is async and requires a callback\n\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n\n    if (isAsync) {\n      if (optAttrDefined) {\n        validatorFunction = Promise.promisify(validator.bind(this.modelInstance, invokeArgs));\n      } else {\n        validatorFunction = Promise.promisify(validator.bind(this.modelInstance));\n      }\n\n      return validatorFunction().catch(e => this._pushError(false, errorKey, e, optValue, validatorType));\n    }\n\n    return Promise.try(() => validator.call(this.modelInstance, invokeArgs)).catch(e => this._pushError(false, errorKey, e, optValue, validatorType));\n  }\n  /**\n   * Prepare and invoke a build-in validator.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated\n   *\n   * @returns {Object} An object with specific keys to invoke the validator.\n   */\n\n\n  _invokeBuiltinValidator(value, test, validatorType, field) {\n    return Promise.try(() => {\n      // Cast value as string to pass new Validator.js string requirement\n      const valueString = String(value); // check if Validator knows that kind of validation test\n\n      if (typeof validator[validatorType] !== 'function') {\n        throw new Error(\"Invalid validator function: \".concat(validatorType));\n      }\n\n      const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n\n      if (!validator[validatorType](valueString, ...validatorArgs)) {\n        throw Object.assign(new Error(test.msg || \"Validation \".concat(validatorType, \" on \").concat(field, \" failed\")), {\n          validatorName: validatorType,\n          validatorArgs\n        });\n      }\n    });\n  }\n  /**\n   * Will extract arguments for the validator.\n   *\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated.\n   *\n   * @private\n   */\n\n\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== 'string' && (validatorType === 'isAlpha' || validatorType === 'isAlphanumeric' || validatorType === 'isMobilePhone');\n\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === 'isImmutable') {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === 'isIP') {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n\n    return validatorArgs;\n  }\n  /**\n   * Will validate a single field against its schema definition (isnull).\n   *\n   * @param {Object} rawAttribute As defined in the Schema.\n   * @param {string} field The field name.\n   * @param {*} value anything.\n   *\n   * @private\n   */\n\n\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === undefined)) {\n      const association = _.values(this.modelInstance.constructor.associations).find(association => association instanceof BelongsTo && association.foreignKey === rawAttribute.fieldName);\n\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n\n        const errMsg = _.get(validators, 'notNull.msg', \"\".concat(this.modelInstance.constructor.name, \".\").concat(field, \" cannot be null\"));\n\n        this.errors.push(new sequelizeError.ValidationErrorItem(errMsg, 'notNull Violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n        field, value, this.modelInstance, 'is_null'));\n      }\n    }\n\n    if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        this.errors.push(new sequelizeError.ValidationErrorItem(\"\".concat(field, \" cannot be an array or an object\"), 'string violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n        field, value, this.modelInstance, 'not_a_string'));\n      }\n    }\n  }\n  /**\n   * Handles the returned result of a Promise.reflect.\n   *\n   * If errors are found it populates this.error.\n   *\n   * @param {string} field The attribute name.\n   * @param {string|number} value The data value.\n   * @param {Array<Promise.PromiseInspection>} promiseInspections objects.\n   *\n   * @private\n   */\n\n\n  _handleReflectedResult(field, value, promiseInspections) {\n    for (const promiseInspection of promiseInspections) {\n      if (promiseInspection.isRejected()) {\n        const rejection = promiseInspection.error();\n        const isBuiltIn = !!rejection.validatorName;\n\n        this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n      }\n    }\n  }\n  /**\n   * Signs all errors retaining the original.\n   *\n   * @param {boolean}       isBuiltin   - Determines if error is from builtin validator.\n   * @param {string}        errorKey    - name of invalid attribute.\n   * @param {Error|string}  rawError    - The original error.\n   * @param {string|number} value       - The data that triggered the error.\n   * @param {string}        fnName      - Name of the validator, if any\n   * @param {Array}         fnArgs      - Arguments for the validator [function], if any\n   *\n   * @private\n   */\n\n\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || 'Validation error';\n    const error = new sequelizeError.ValidationErrorItem(message, 'Validation error', // sequelizeError.ValidationErrorItem.Origins.FUNCTION,\n    errorKey, value, this.modelInstance, fnName, isBuiltin ? fnName : undefined, isBuiltin ? fnArgs : undefined);\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n    this.errors.push(error);\n  }\n\n}\n/**\n * @define {string} The error key for arguments as passed by custom validators\n * @private\n */\n\n\nInstanceValidator.RAW_KEY_NAME = 'original';\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;","map":null,"metadata":{},"sourceType":"script"}