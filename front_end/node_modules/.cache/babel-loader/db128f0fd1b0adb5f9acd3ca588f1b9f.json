{"ast":null,"code":"\"use strict\";\n\nconst DateTimeN = require('./datetimen');\n\nconst EPOCH_DATE = new Date(1900, 0, 1);\nconst UTC_EPOCH_DATE = new Date(Date.UTC(1900, 0, 1));\nmodule.exports = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n  declaration: function declaration() {\n    return 'datetime';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(DateTimeN.id);\n    buffer.writeUInt8(8);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options) {\n    if (parameter.value != null) {\n      let days, dstDiff, milliseconds, seconds, threeHundredthsOfSecond;\n\n      if (options.useUTC) {\n        days = Math.floor((parameter.value.getTime() - UTC_EPOCH_DATE.getTime()) / (1000 * 60 * 60 * 24));\n        seconds = parameter.value.getUTCHours() * 60 * 60;\n        seconds += parameter.value.getUTCMinutes() * 60;\n        seconds += parameter.value.getUTCSeconds();\n        milliseconds = seconds * 1000 + parameter.value.getUTCMilliseconds();\n      } else {\n        dstDiff = -(parameter.value.getTimezoneOffset() - EPOCH_DATE.getTimezoneOffset()) * 60 * 1000;\n        days = Math.floor((parameter.value.getTime() - EPOCH_DATE.getTime() + dstDiff) / (1000 * 60 * 60 * 24));\n        seconds = parameter.value.getHours() * 60 * 60;\n        seconds += parameter.value.getMinutes() * 60;\n        seconds += parameter.value.getSeconds();\n        milliseconds = seconds * 1000 + parameter.value.getMilliseconds();\n      }\n\n      threeHundredthsOfSecond = milliseconds / (3 + 1 / 3);\n      threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond);\n      buffer.writeUInt8(8);\n      buffer.writeInt32LE(days);\n      buffer.writeUInt32LE(threeHundredthsOfSecond);\n    } else {\n      buffer.writeUInt8(0);\n    }\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = Date.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}