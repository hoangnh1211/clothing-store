{"ast":null,"code":"'use strict';\n\nconst Utils = require('../../utils');\n\nconst util = require('util');\n\nconst DataTypes = require('../../data-types');\n\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nconst semver = require('semver');\n\nconst _ = require('lodash');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return \"SET search_path to \".concat(searchPath, \";\");\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = Object.assign({\n      encoding: null,\n      collate: null\n    }, options || {});\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? \" ENCODING = \".concat(this.escape(options.encoding)) : '',\n      collation: options.collate ? \" LC_COLLATE = \".concat(this.escape(options.collate)) : '',\n      ctype: options.ctype ? \" LC_CTYPE = \".concat(this.escape(options.ctype)) : '',\n      template: options.template ? \" TEMPLATE = \".concat(this.escape(options.template)) : ''\n    };\n    return \"CREATE DATABASE \".concat(values.database).concat(values.encoding).concat(values.collation).concat(values.ctype).concat(values.template, \";\");\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return \"DROP DATABASE IF EXISTS \".concat(this.quoteTable(databaseName), \";\");\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return \"CREATE SCHEMA IF NOT EXISTS \".concat(schema, \";\");\n    }\n\n    return \"CREATE SCHEMA \".concat(schema, \";\");\n  }\n\n  dropSchema(schema) {\n    return \"DROP SCHEMA IF EXISTS \".concat(schema, \" CASCADE;\");\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = Object.assign({}, options || {}); //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += \"; COMMENT ON TABLE \".concat(quotedTable, \" IS \").concat(this.escape(options.comment));\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += \"; COMMENT ON COLUMN \".concat(quotedTable, \".\").concat(quotedAttr, \" IS \").concat(escapedCommentText);\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(\"\".concat(quotedAttr, \" \").concat(dataType));\n    }\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += \", UNIQUE (\".concat(columns.fields.map(field => this.quoteIdentifier(field)).join(', '), \")\");\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += \", PRIMARY KEY (\".concat(pks, \")\");\n    }\n\n    return \"CREATE TABLE \".concat(databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : '').concat(quotedTable, \" (\").concat(attributesClause, \")\").concat(comments).concat(columnComments, \";\");\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return \"DROP TABLE IF EXISTS \".concat(this.quoteTable(tableName)).concat(options.cascade ? ' CASCADE' : '', \";\");\n  }\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) schema = 'public';\n    return 'SELECT ' + 'pk.constraint_type as \"Constraint\",' + 'c.column_name as \"Field\", ' + 'c.column_default as \"Default\",' + 'c.is_nullable as \"Null\", ' + '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' + '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' + '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' + 'FROM information_schema.columns c ' + 'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' + 'cu.column_name, tc.constraint_type ' + 'FROM information_schema.TABLE_CONSTRAINTS tc ' + 'JOIN information_schema.KEY_COLUMN_USAGE  cu ' + 'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' + 'and tc.constraint_name=cu.constraint_name ' + 'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' + 'ON pk.table_schema=c.table_schema ' + 'AND pk.table_name=c.table_name ' + 'AND pk.column_name=c.column_name ' + \"WHERE c.table_name = \".concat(this.escape(tableName), \" AND c.table_schema = \").concat(this.escape(schema), \" \");\n  }\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n\n\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    } // https://www.postgresql.org/docs/current/static/functions-json.html\n\n\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    } // Check invalid json statement\n\n\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(\"Invalid json statement: \".concat(stmt));\n    } // return true if the statement has valid json function\n\n\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => \"\".concat(this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path)), \" = '\").concat(condition.value, \"'\"));\n        return conditions.join(' AND ');\n      }\n\n      if (smth.path) {\n        let str; // Allow specifying conditions using the postgres json syntax\n\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const dbDataType = this.attributeToSQL(dataType, {\n      context: 'addColumn',\n      table,\n      key\n    });\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n    let query = \"ALTER TABLE \".concat(quotedTable, \" ADD COLUMN \").concat(quotedKey, \" \").concat(definition, \";\");\n\n    if (dataType.type && dataType.type instanceof DataTypes.ENUM || dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return \"ALTER TABLE \".concat(quotedTableName, \" DROP COLUMN \").concat(quotedAttributeName, \";\");\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => \"ALTER TABLE \".concat(this.quoteTable(tableName), \" ALTER COLUMN \").concat(subQuery, \";\");\n\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" SET NOT NULL\"));\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" DROP NOT NULL\"));\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" SET DEFAULT \").concat(definition.match(/DEFAULT ([^;]+)/)[1]));\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" DROP DEFAULT\"));\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, {\n          schema: false\n        }));\n        definition += \" USING (\".concat(this.quoteIdentifier(attributeName), \"::\").concat(this.pgEnumName(tableName, attributeName), \")\");\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(\"ADD UNIQUE (\".concat(this.quoteIdentifier(attributeName), \")\")).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(\"ADD FOREIGN KEY (\".concat(this.quoteIdentifier(attributeName), \") \").concat(definition)).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" TYPE \").concat(definition));\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(\"\".concat(this.quoteIdentifier(attrBefore), \" TO \").concat(this.quoteIdentifier(attributeName)));\n    }\n\n    return \"ALTER TABLE \".concat(this.quoteTable(tableName), \" RENAME COLUMN \").concat(attrString.join(', '), \";\");\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? \"RETURNS \".concat(returns) : '';\n    parameters = parameters || '';\n    return \"CREATE OR REPLACE FUNCTION pg_temp.\".concat(fnName, \"(\").concat(parameters, \") \").concat(returns, \" AS $func$ BEGIN \").concat(body, \" END; $func$ LANGUAGE \").concat(language, \"; SELECT * FROM pg_temp.\").concat(fnName, \"();\");\n  }\n\n  exceptionFn(fnName, tableName, parameters, main, then, when, returns, language) {\n    when = when || 'unique_violation';\n    const body = \"\".concat(main, \" EXCEPTION WHEN \").concat(when, \" THEN \").concat(then, \";\");\n    return this.fn(fnName, tableName, parameters, body, returns, language);\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    const primaryField = this.quoteIdentifier(model.primaryKeyField);\n\n    const upsertOptions = _.defaults({\n      bindParam: false\n    }, options);\n\n    const insert = this.insertQuery(tableName, insertValues, model.rawAttributes, upsertOptions);\n    const update = this.updateQuery(tableName, updateValues, where, upsertOptions, model.rawAttributes);\n    insert.query = insert.query.replace('RETURNING *', \"RETURNING \".concat(primaryField, \" INTO primary_key\"));\n    update.query = update.query.replace('RETURNING *', \"RETURNING \".concat(primaryField, \" INTO primary_key\"));\n    return this.exceptionFn('sequelize_upsert', tableName, 'OUT created boolean, OUT primary_key text', \"\".concat(insert.query, \" created := true;\"), \"\".concat(update.query, \"; created := false\"));\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\"TRUNCATE \".concat(this.quoteTable(tableName)), options.restartIdentity ? ' RESTART IDENTITY' : '', options.cascade ? ' CASCADE' : ''].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? \" LIMIT \".concat(this.escape(options.limit)) : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = \" WHERE \".concat(whereClause);\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = _.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? \"(\".concat(pks, \")\") : pks;\n      primaryKeysSelection = pks;\n      return \"DELETE FROM \".concat(table, \" WHERE \").concat(primaryKeys, \" IN (SELECT \").concat(primaryKeysSelection, \" FROM \").concat(table).concat(whereClause).concat(limit, \")\");\n    }\n\n    return \"DELETE FROM \".concat(table).concat(whereClause);\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = \" AND s.oid = t.relnamespace AND s.nspname = '\".concat(tableName.schema, \"'\");\n      tableName = tableName.tableName;\n    } // This is ARCANE!\n\n\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' + 'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' + \"AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a\".concat(schemaJoin, \" \") + 'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' + \"t.relkind = 'r' and t.relname = '\".concat(tableName, \"'\").concat(schemaWhere, \" \") + 'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return ['SELECT constraint_catalog AS \"constraintCatalog\",', 'constraint_schema AS \"constraintSchema\",', 'constraint_name AS \"constraintName\",', 'table_catalog AS \"tableCatalog\",', 'table_schema AS \"tableSchema\",', 'table_name AS \"tableName\",', 'constraint_type AS \"constraintType\",', 'is_deferrable AS \"isDeferrable\",', 'initially_deferred AS \"initiallyDeferred\"', 'from INFORMATION_SCHEMA.table_constraints', \"WHERE table_name='\".concat(tableName, \"';\")].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(\"\".concat(tableName, \"_\").concat(indexNameOrAttributes.join('_')));\n    }\n\n    return \"DROP INDEX IF EXISTS \".concat(this.quoteIdentifiers(indexName));\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n\n    if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = \"ENUM(\".concat(values.map(value => this.escape(value)).join(', '), \")\");\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += \" DEFAULT \".concat(this.escape(attribute.defaultValue, attribute));\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if ((!attribute.references.model || typeof attribute.references.model == 'string') && options.table && options.table.schema) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += \" REFERENCES \".concat(referencesTable, \" (\").concat(referencesKey, \")\");\n\n      if (attribute.onDelete) {\n        sql += \" ON DELETE \".concat(attribute.onDelete.toUpperCase());\n      }\n\n      if (attribute.onUpdate) {\n        sql += \" ON UPDATE \".concat(attribute.onUpdate.toUpperCase());\n      }\n\n      if (attribute.references.deferrable) {\n        sql += \" \".concat(attribute.references.deferrable.toString(this));\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && (options.context === 'addColumn' || options.context === 'changeColumn')) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += \"; COMMENT ON COLUMN \".concat(this.quoteTable(options.table), \".\").concat(quotedAttr, \" IS \").concat(escapedCommentText);\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += \" COMMENT \".concat(attribute.comment);\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return \"SET CONSTRAINTS \".concat(columnFragment, \" \").concat(type);\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, Object.assign({\n        key\n      }, options || {}));\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this.expandFunctionParamList(functionParams);\n    return \"CREATE \".concat(this.triggerEventTypeIsConstraint(eventType), \"TRIGGER \").concat(this.quoteIdentifier(triggerName), \" \").concat(decodedEventType, \" \").concat(eventSpec, \" ON \").concat(this.quoteTable(tableName)).concat(expandedOptions ? \" \".concat(expandedOptions) : '', \" EXECUTE PROCEDURE \").concat(functionName, \"(\").concat(paramList, \");\");\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return \"DROP TRIGGER \".concat(this.quoteIdentifier(triggerName), \" ON \").concat(this.quoteTable(tableName), \" RESTRICT;\");\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return \"ALTER TRIGGER \".concat(this.quoteIdentifier(oldTriggerName), \" ON \").concat(this.quoteTable(tableName), \" RENAME TO \").concat(this.quoteIdentifier(newTriggerName), \";\");\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n    const paramList = this.expandFunctionParamList(params);\n    const variableList = options && options.variables ? this.expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n    return \"\".concat(statement, \" \").concat(functionName, \"(\").concat(paramList, \") RETURNS \").concat(returnType, \" AS $func$ \").concat(variableList, \" BEGIN \").concat(body, \" END; $func$ language '\").concat(language, \"'\").concat(expandedOptionsArray, \";\");\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName'); // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n\n    const paramList = this.expandFunctionParamList(params);\n    return \"DROP FUNCTION \".concat(functionName, \"(\").concat(paramList, \") RESTRICT;\");\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this.expandFunctionParamList(params);\n    return \"ALTER FUNCTION \".concat(oldFunctionName, \"(\").concat(paramList, \") RENAME TO \").concat(newFunctionName, \";\");\n  }\n\n  databaseConnectionUri(config) {\n    let uri = \"\".concat(config.protocol, \"://\").concat(config.user, \":\").concat(config.password, \"@\").concat(config.host);\n\n    if (config.port) {\n      uri += \":\".concat(config.port);\n    }\n\n    uri += \"/\".concat(config.database);\n\n    if (config.ssl) {\n      uri += \"?ssl=\".concat(config.ssl);\n    }\n\n    return uri;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n\n      if (curParam.type) {\n        if (curParam.direction) {\n          paramDef.push(curParam.direction);\n        }\n\n        if (curParam.name) {\n          paramDef.push(curParam.name);\n        }\n\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n    });\n    return paramList.join(', ');\n  }\n\n  expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('expandFunctionVariableList: function variables must be an array');\n    }\n\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n\n      let variableDefinition = \"DECLARE \".concat(variable.name, \" \").concat(variable.type);\n\n      if (variable.default) {\n        variableDefinition += \" := \".concat(variable.default);\n      }\n\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ? '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(\"Invalid trigger event specified: \".concat(eventSpecifier));\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(\"parseTriggerEventSpec: undefined trigger event \".concat(fireKey));\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += \" OF \".concat(fireValue.join(', '));\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"'); // pgListEnums requires the enum name only, without the schema\n\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = \" AND t.typname=\".concat(this.pgEnumName(tableDetails.tableName, attrName, {\n        schema: false\n      }).replace(/\"/g, \"'\"));\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' + 'JOIN pg_enum e ON t.oid = e.enumtypid ' + 'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' + \"WHERE n.nspname = '\".concat(tableDetails.schema, \"'\").concat(enumName, \" GROUP BY 1\");\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = \"ENUM(\".concat(dataType.values.map(value => this.escape(value)).join(', '), \")\");\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = \"CREATE TYPE \".concat(enumName, \" AS \").concat(values, \";\");\n\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = \"ALTER TYPE \".concat(enumName, \" ADD VALUE \");\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += \" BEFORE \".concat(this.escape(options.before));\n    } else if (options.after) {\n      sql += \" AFTER \".concat(this.escape(options.after));\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return \"DROP TYPE IF EXISTS \".concat(enumName, \"; \");\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/, ''));\n    return matches.slice(0, -1);\n  }\n\n  padInt(i) {\n    return i < 10 ? \"0\".concat(i.toString()) : i.toString();\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n\n\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' + \"WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '\".concat(tableName, \"' LIMIT 1) AND r.contype = 'f' ORDER BY 1;\");\n  }\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n\n\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' + 'DISTINCT tc.constraint_name as constraint_name, ' + 'tc.constraint_schema as constraint_schema, ' + 'tc.constraint_catalog as constraint_catalog, ' + 'tc.table_name as table_name,' + 'tc.table_schema as table_schema,' + 'tc.table_catalog as table_catalog,' + 'kcu.column_name as column_name,' + 'ccu.table_schema  AS referenced_table_schema,' + 'ccu.table_catalog  AS referenced_table_catalog,' + 'ccu.table_name  AS referenced_table_name,' + 'ccu.column_name AS referenced_column_name ' + 'FROM information_schema.table_constraints AS tc ' + 'JOIN information_schema.key_column_usage AS kcu ' + 'ON tc.constraint_name = kcu.constraint_name ' + 'JOIN information_schema.constraint_column_usage AS ccu ' + 'ON ccu.constraint_name = tc.constraint_name ';\n  }\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n\n\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return \"\".concat(this._getForeignKeyReferencesQueryPrefix(), \"WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '\").concat(tableName, \"'\").concat(catalogName ? \" AND tc.table_catalog = '\".concat(catalogName, \"'\") : '').concat(schemaName ? \" AND tc.table_schema = '\".concat(schemaName, \"'\") : '');\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return \"\".concat(this._getForeignKeyReferencesQueryPrefix(), \"WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='\").concat(tableName, \"' AND  kcu.column_name = '\").concat(columnName, \"'\").concat(schema ? \" AND tc.table_schema = '\".concat(schema, \"'\") : '');\n  }\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return \"ALTER TABLE \".concat(this.quoteTable(tableName), \" DROP CONSTRAINT \").concat(this.quoteIdentifier(foreignKey), \";\");\n  }\n\n}\n\nmodule.exports = PostgresQueryGenerator;","map":null,"metadata":{},"sourceType":"script"}