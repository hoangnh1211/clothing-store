{"ast":null,"code":"\"use strict\";\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst util = require('util');\n\nclass Debug extends EventEmitter {\n  /*\n    @options    Which debug details should be sent.\n                data    - dump of packet data\n                payload - details of decoded payload\n  */\n  constructor({\n    data = false,\n    payload = false,\n    packet = false,\n    token = false\n  } = {}) {\n    super();\n    this.options = {\n      data,\n      payload,\n      packet,\n      token\n    };\n    this.indent = '  ';\n  }\n\n  packet(direction, packet) {\n    if (this.haveListeners() && this.options.packet) {\n      this.log('');\n      this.log(direction);\n      this.log(packet.headerToString(this.indent));\n    }\n  }\n\n  data(packet) {\n    if (this.haveListeners() && this.options.data) {\n      this.log(packet.dataToString(this.indent));\n    }\n  }\n\n  payload(generatePayloadText) {\n    if (this.haveListeners() && this.options.payload) {\n      this.log(generatePayloadText());\n    }\n  }\n\n  token(token) {\n    if (this.haveListeners() && this.options.token) {\n      this.log(util.inspect(token, {\n        showHidden: false,\n        depth: 5,\n        colors: true\n      }));\n    }\n  }\n\n  haveListeners() {\n    return this.listeners('debug').length > 0;\n  }\n\n  log(text) {\n    this.emit('debug', text);\n  }\n\n}\n\nmodule.exports = Debug;","map":null,"metadata":{},"sourceType":"script"}