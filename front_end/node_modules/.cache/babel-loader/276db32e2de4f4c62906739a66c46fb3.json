{"ast":null,"code":"\"use strict\";\n\nconst BufferList = require('bl');\n\nconst _require = require('readable-stream'),\n      Duplex = _require.Duplex;\n\nconst _require2 = require('./packet'),\n      Packet = _require2.Packet,\n      HEADER_LENGTH = _require2.HEADER_LENGTH;\n\nclass OutgoingMessageStream extends Duplex {\n  constructor(debug, {\n    packetSize\n  }) {\n    super({\n      writableObjectMode: true\n    });\n    this.packetSize = packetSize;\n    this.debug = debug;\n    this.bl = new BufferList(); // When the writable side is ended, push `null`\n    // to also end the readable side.\n\n    this.on('finish', () => {\n      this.push(null);\n    });\n  }\n\n  _write(message, encoding, callback) {\n    const length = this.packetSize - HEADER_LENGTH;\n    let packetNumber = 0;\n    this.currentMessage = message;\n    this.currentMessage.on('data', data => {\n      this.bl.append(data);\n\n      while (this.bl.length > length) {\n        const data = this.bl.slice(0, length);\n        this.bl.consume(length); // TODO: Get rid of creating `Packet` instances here.\n\n        const packet = new Packet(message.type);\n        packet.packetId(packetNumber += 1);\n        packet.resetConnection(message.resetConnection);\n        packet.addData(data);\n        this.debug.packet('Sent', packet);\n        this.debug.data(packet);\n\n        if (this.push(packet.buffer) === false) {\n          this.currentMessage.pause();\n        }\n      }\n    });\n    this.currentMessage.on('end', () => {\n      const data = this.bl.slice();\n      this.bl.consume(data.length); // TODO: Get rid of creating `Packet` instances here.\n\n      const packet = new Packet(message.type);\n      packet.packetId(packetNumber += 1);\n      packet.resetConnection(message.resetConnection);\n      packet.last(true);\n      packet.addData(data);\n      this.debug.packet('Sent', packet);\n      this.debug.data(packet);\n      this.push(packet.buffer);\n      this.currentMessage = undefined;\n      callback();\n    });\n  }\n\n  _read(size) {\n    // If we do have a message, resume it and get data flowing.\n    // Otherwise, there is nothing to do.\n    if (this.currentMessage) {\n      this.currentMessage.resume();\n    }\n  }\n\n}\n\nmodule.exports = OutgoingMessageStream;","map":null,"metadata":{},"sourceType":"script"}