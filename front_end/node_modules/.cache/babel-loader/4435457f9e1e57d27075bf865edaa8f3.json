{"ast":null,"code":"'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\n\nconst ResourceLock = require('./resource-lock');\n\nconst Promise = require('../../promise');\n\nconst _require = require('../../utils/logger'),\n      logger = _require.logger;\n\nconst sequelizeErrors = require('../../errors');\n\nconst DataTypes = require('../../data-types').mssql;\n\nconst parserStore = require('../parserStore')('mssql');\n\nconst debug = logger.debugContext('connection:mssql');\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('tedious');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: 'default',\n        options: {\n          userName: config.username || undefined,\n          password: config.password || undefined\n        }\n      },\n      options: {\n        port: parseInt(config.port, 10),\n        database: config.database,\n        encrypt: false\n      }\n    };\n\n    if (config.dialectOptions) {\n      // only set port if no instance name was provided\n      if (config.dialectOptions.options && config.dialectOptions.options.instanceName) {\n        delete connectionConfig.options.port;\n      }\n\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n\n    return new Promise((resolve, reject) => {\n      const connection = new this.lib.Connection(connectionConfig);\n      connection.lib = this.lib;\n      const resourceLock = new ResourceLock(connection);\n\n      const connectHandler = error => {\n        connection.removeListener('end', endHandler);\n        connection.removeListener('error', errorHandler);\n        if (error) return reject(error);\n        debug('connection acquired');\n        resolve(resourceLock);\n      };\n\n      const endHandler = () => {\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('error', errorHandler);\n        reject(new Error('Connection was closed by remote server'));\n      };\n\n      const errorHandler = error => {\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('end', endHandler);\n        reject(error);\n      };\n\n      connection.once('error', errorHandler);\n      connection.once('end', endHandler);\n      connection.once('connect', connectHandler);\n      /*\n       * Permanently attach this event before connection is even acquired\n       * tedious sometime emits error even after connect(with error).\n       *\n       * If we dont attach this even that unexpected error event will crash node process\n       *\n       * E.g. connectTimeout is set higher than requestTimeout\n       */\n\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n            this.pool.destroy(resourceLock);\n        }\n      });\n\n      if (config.dialectOptions && config.dialectOptions.debug) {\n        connection.on('debug', debugTedious.log.bind(debugTedious));\n      }\n    }).catch(error => {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n\n      switch (error.code) {\n        case 'ESOCKET':\n          if (error.message.includes('connect EHOSTUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n\n          if (error.message.includes('connect ENETUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n\n          if (error.message.includes('connect ECONNREFUSED')) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n\n          throw new sequelizeErrors.ConnectionError(error);\n\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ELOGIN':\n          throw new sequelizeErrors.AccessDeniedError(error);\n\n        case 'EINVAL':\n          throw new sequelizeErrors.InvalidConnectionError(error);\n\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    });\n  }\n\n  disconnect(connectionLock) {\n    /**\n     * Abstract connection may try to disconnect raw connection used for fetching version\n     */\n    const connection = connectionLock.unwrap ? connectionLock.unwrap() : connectionLock; // Don't disconnect a connection that is already disconnected\n\n    if (connection.closed) {\n      return Promise.resolve();\n    }\n\n    return new Promise(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connectionLock) {\n    /**\n     * Abstract connection may try to validate raw connection used for fetching version\n     */\n    const connection = connectionLock.unwrap ? connectionLock.unwrap() : connectionLock;\n    return connection && connection.loggedIn;\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}