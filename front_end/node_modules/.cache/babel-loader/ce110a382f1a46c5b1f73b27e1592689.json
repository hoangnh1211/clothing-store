{"ast":null,"code":"'use strict';\n\nconst DataTypes = require('../../data-types');\n\nconst Promise = require('../../promise');\n\nconst QueryTypes = require('../../query-types');\n\nconst _ = require('lodash');\n/**\n Returns an object that handles Postgres special needs to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n   * Ensure enum and their values.\n   *\n   * @param {QueryInterface} qi\n   * @param {string} tableName  Name of table to create\n   * @param {Object} attributes Object representing a list of normalized table attributes\n   * @param {Object} [options]\n   * @param {Model}  [model]\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\nfunction ensureEnums(qi, tableName, attributes, options, model) {\n  const keys = Object.keys(attributes);\n  const keyLen = keys.length;\n  let sql = '';\n  let promises = [];\n  let i = 0;\n\n  for (i = 0; i < keyLen; i++) {\n    const attribute = attributes[keys[i]];\n    const type = attribute.type;\n\n    if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n    ) {\n        sql = qi.QueryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(qi.sequelize.query(sql, Object.assign({}, options, {\n          plain: true,\n          raw: true,\n          type: QueryTypes.SELECT\n        })));\n      }\n  }\n\n  return Promise.all(promises).then(results => {\n    promises = [];\n    let enumIdx = 0; // This little function allows us to re-use the same code that prepends or appends new value to enum array\n\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = _.clone(options);\n\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return qi.sequelize.query(qi.QueryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n          // If the enum type doesn't exist then create it\n          if (!results[enumIdx]) {\n            promises.push(() => {\n              return qi.sequelize.query(qi.QueryGenerator.pgEnum(tableName, field, enumType, options), Object.assign({}, options, {\n                raw: true\n              }));\n            });\n          } else if (!!results[enumIdx] && !!model) {\n            const enumVals = qi.QueryGenerator.fromArray(results[enumIdx].enum_value);\n            const vals = enumType.values; // Going through already existing values allows us to make queries that depend on those values\n            // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n            // Then we append the rest of new values AFTER the latest already existing value\n            // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n            // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n            // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n\n            let lastOldEnumValue;\n            let rightestPosition = -1;\n\n            for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n              const enumVal = enumVals[oldIndex];\n              const newIdx = vals.indexOf(enumVal);\n              lastOldEnumValue = enumVal;\n\n              if (newIdx === -1) {\n                continue;\n              }\n\n              const newValuesBefore = vals.slice(0, newIdx);\n              const promisesLength = promises.length; // we go in reverse order so we could stop when we meet old value\n\n              for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n                if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                  break;\n                }\n\n                addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n              } // we detect the most 'right' position of old value in new enum array so we can append new values to it\n\n\n              if (newIdx > rightestPosition) {\n                rightestPosition = newIdx;\n              }\n            }\n\n            if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n              const remainingEnumValues = vals.slice(rightestPosition + 1);\n\n              for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n                addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n              }\n            }\n\n            enumIdx++;\n          }\n        }\n    }\n\n    return promises.reduce((promise, asyncFunction) => promise.then(asyncFunction), Promise.resolve()).tap(() => {\n      // If ENUM processed, then refresh OIDs\n      if (promises.length) {\n        return qi.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n      }\n    });\n  });\n}\n\nexports.ensureEnums = ensureEnums;","map":null,"metadata":{},"sourceType":"script"}