{"ast":null,"code":"module.exports = BinaryWriter;\n\nfunction BinaryWriter(size, allowResize) {\n  this.buffer = new Buffer(size);\n  this.position = 0;\n  this.allowResize = allowResize;\n}\n\nfunction _write(write, size) {\n  return function (value, noAssert) {\n    this.ensureSize(size);\n    write.call(this.buffer, value, this.position, noAssert);\n    this.position += size;\n  };\n}\n\nBinaryWriter.prototype.writeUInt8 = _write(Buffer.prototype.writeUInt8, 1);\nBinaryWriter.prototype.writeUInt16LE = _write(Buffer.prototype.writeUInt16LE, 2);\nBinaryWriter.prototype.writeUInt16BE = _write(Buffer.prototype.writeUInt16BE, 2);\nBinaryWriter.prototype.writeUInt32LE = _write(Buffer.prototype.writeUInt32LE, 4);\nBinaryWriter.prototype.writeUInt32BE = _write(Buffer.prototype.writeUInt32BE, 4);\nBinaryWriter.prototype.writeInt8 = _write(Buffer.prototype.writeInt8, 1);\nBinaryWriter.prototype.writeInt16LE = _write(Buffer.prototype.writeInt16LE, 2);\nBinaryWriter.prototype.writeInt16BE = _write(Buffer.prototype.writeInt16BE, 2);\nBinaryWriter.prototype.writeInt32LE = _write(Buffer.prototype.writeInt32LE, 4);\nBinaryWriter.prototype.writeInt32BE = _write(Buffer.prototype.writeInt32BE, 4);\nBinaryWriter.prototype.writeFloatLE = _write(Buffer.prototype.writeFloatLE, 4);\nBinaryWriter.prototype.writeFloatBE = _write(Buffer.prototype.writeFloatBE, 4);\nBinaryWriter.prototype.writeDoubleLE = _write(Buffer.prototype.writeDoubleLE, 8);\nBinaryWriter.prototype.writeDoubleBE = _write(Buffer.prototype.writeDoubleBE, 8);\n\nBinaryWriter.prototype.writeBuffer = function (buffer) {\n  this.ensureSize(buffer.length);\n  buffer.copy(this.buffer, this.position, 0, buffer.length);\n  this.position += buffer.length;\n};\n\nBinaryWriter.prototype.writeVarInt = function (value) {\n  var length = 1;\n\n  while ((value & 0xFFFFFF80) !== 0) {\n    this.writeUInt8(value & 0x7F | 0x80);\n    value >>>= 7;\n    length++;\n  }\n\n  this.writeUInt8(value & 0x7F);\n  return length;\n};\n\nBinaryWriter.prototype.ensureSize = function (size) {\n  if (this.buffer.length < this.position + size) {\n    if (this.allowResize) {\n      var tempBuffer = new Buffer(this.position + size);\n      this.buffer.copy(tempBuffer, 0, 0, this.buffer.length);\n      this.buffer = tempBuffer;\n    } else {\n      throw new RangeError('index out of range');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}