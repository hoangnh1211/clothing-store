{"ast":null,"code":"\"use strict\";\n\nconst Queue = require(\"./Queue\");\n/**\n * @class\n * @private\n */\n\n\nclass PriorityQueue {\n  constructor(size) {\n    this._size = Math.max(+size | 0, 1);\n    /** @type {Queue[]} */\n\n    this._slots = []; // initialize arrays to hold queue elements\n\n    for (let i = 0; i < this._size; i++) {\n      this._slots.push(new Queue());\n    }\n  }\n\n  get length() {\n    let _length = 0;\n\n    for (let i = 0, slots = this._slots.length; i < slots; i++) {\n      _length += this._slots[i].length;\n    }\n\n    return _length;\n  }\n\n  enqueue(obj, priority) {\n    // Convert to integer with a default value of 0.\n    priority = priority && +priority | 0 || 0;\n\n    if (priority) {\n      if (priority < 0 || priority >= this._size) {\n        priority = this._size - 1; // put obj at the end of the line\n      }\n    }\n\n    this._slots[priority].push(obj);\n  }\n\n  dequeue() {\n    for (let i = 0, sl = this._slots.length; i < sl; i += 1) {\n      if (this._slots[i].length) {\n        return this._slots[i].shift();\n      }\n    }\n\n    return;\n  }\n\n  get head() {\n    for (let i = 0, sl = this._slots.length; i < sl; i += 1) {\n      if (this._slots[i].length > 0) {\n        return this._slots[i].head;\n      }\n    }\n\n    return;\n  }\n\n  get tail() {\n    for (let i = this._slots.length - 1; i >= 0; i--) {\n      if (this._slots[i].length > 0) {\n        return this._slots[i].tail;\n      }\n    }\n\n    return;\n  }\n\n}\n\nmodule.exports = PriorityQueue;","map":null,"metadata":{},"sourceType":"script"}