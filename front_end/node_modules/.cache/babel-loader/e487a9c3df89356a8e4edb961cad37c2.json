{"ast":null,"code":"'use strict';\n\nconst MySQLQueryGenerator = require('../mysql/query-generator');\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = Object.assign({\n      charset: null,\n      collate: null\n    }, options || {});\n    const charset = options.charset ? \" DEFAULT CHARACTER SET \".concat(this.escape(options.charset)) : '';\n    const collate = options.collate ? \" DEFAULT COLLATE \".concat(this.escape(options.collate)) : '';\n    return \"CREATE SCHEMA IF NOT EXISTS \".concat(this.quoteIdentifier(schema)).concat(charset).concat(collate, \";\");\n  }\n\n  dropSchema(schema) {\n    return \"DROP SCHEMA IF EXISTS \".concat(this.quoteIdentifier(schema), \";\");\n  }\n\n  showSchemasQuery(options) {\n    const skip = options.skip && Array.isArray(options.skip) && options.skip.length > 0 ? options.skip : null;\n    return \"SELECT SCHEMA_NAME as schema_name FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA'\".concat(skip ? skip.reduce((sql, schemaName) => sql += \",\".concat(this.escape(schemaName)), '') : '', \");\");\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n\n    if (database) {\n      query += \" AND TABLE_SCHEMA = \".concat(this.escape(database));\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n    }\n\n    return \"\".concat(query, \";\");\n  }\n\n}\n\nmodule.exports = MariaDBQueryGenerator;","map":null,"metadata":{},"sourceType":"script"}