{"ast":null,"code":"'use strict';\n\nconst TYPES = require('./datatypes').TYPES;\n\nconst declareType = require('./datatypes').declare;\n\nconst MAX = 65535; // (1 << 16) - 1\n\nconst JSON_COLUMN_ID = 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B';\n\nfunction Table(name) {\n  if (name) {\n    const parsed = Table.parseName(name);\n    this.name = parsed.name;\n    this.schema = parsed.schema;\n    this.database = parsed.database;\n    this.path = (this.database ? \"[\".concat(this.database, \"].\") : '') + (this.schema ? \"[\".concat(this.schema, \"].\") : '') + \"[\".concat(this.name, \"]\");\n    this.temporary = this.name.charAt(0) === '#';\n  }\n\n  this.columns = [];\n  this.rows = [];\n  Object.defineProperty(this.columns, 'add', {\n    value(name, column, options) {\n      if (column == null) {\n        throw new Error('Column data type is not defined.');\n      }\n\n      if (column instanceof Function) {\n        column = column();\n      }\n\n      options = options || {};\n      column.name = name;\n      column.nullable = options.nullable;\n      column.primary = options.primary;\n      return this.push(column);\n    }\n\n  });\n  Object.defineProperty(this.rows, 'add', {\n    value() {\n      return this.push(Array.prototype.slice.call(arguments));\n    }\n\n  });\n}\n/*\n@private\n*/\n\n\nTable.prototype._makeBulk = function _makeBulk() {\n  for (let i = 0; i < this.columns.length; i++) {\n    const col = this.columns[i];\n\n    switch (col.type) {\n      case TYPES.Xml:\n        col.type = TYPES.NVarChar(MAX).type;\n        break;\n\n      case TYPES.UDT:\n      case TYPES.Geography:\n      case TYPES.Geometry:\n        col.type = TYPES.VarBinary(MAX).type;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return this;\n};\n\nTable.prototype.declare = function declare() {\n  const pkey = this.columns.filter(col => col.primary === true).map(col => col.name);\n  const cols = this.columns.map(col => {\n    const def = [\"[\".concat(col.name, \"] \").concat(declareType(col.type, col))];\n\n    if (col.nullable === true) {\n      def.push('null');\n    } else if (col.nullable === false) {\n      def.push('not null');\n    }\n\n    if (col.primary === true && pkey.length === 1) {\n      def.push('primary key');\n    }\n\n    return def.join(' ');\n  });\n  const constraint = pkey.length > 1 ? \", constraint PK_\".concat(this.temporary ? this.name.substr(1) : this.name, \" primary key (\").concat(pkey.join(', '), \")\") : '';\n  return \"create table \".concat(this.path, \" (\").concat(cols.join(', ')).concat(constraint, \")\");\n};\n\nTable.fromRecordset = function fromRecordset(recordset, name) {\n  const t = new this(name);\n\n  for (const colName in recordset.columns) {\n    if (Object.prototype.hasOwnProperty.call(recordset.columns, colName)) {\n      const col = recordset.columns[colName];\n      t.columns.add(colName, {\n        type: col.type,\n        length: col.length,\n        scale: col.scale,\n        precision: col.precision\n      }, {\n        nullable: col.nullable\n      });\n    }\n  }\n\n  if (t.columns.length === 1 && t.columns[0].name === JSON_COLUMN_ID) {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add(JSON.stringify(recordset[i]));\n    }\n  } else {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add.apply(t.rows, t.columns.map(col => recordset[i][col.name]));\n    }\n  }\n\n  return t;\n};\n\nTable.parseName = function parseName(name) {\n  const length = name.length;\n  let cursor = -1;\n  let buffer = '';\n  let escaped = false;\n  const path = [];\n\n  while (++cursor < length) {\n    const char = name.charAt(cursor);\n\n    if (char === '[') {\n      if (escaped) {\n        buffer += char;\n      } else {\n        escaped = true;\n      }\n    } else if (char === ']') {\n      if (escaped) {\n        escaped = false;\n      } else {\n        throw new Error('Invalid table name.');\n      }\n    } else if (char === '.') {\n      if (escaped) {\n        buffer += char;\n      } else {\n        path.push(buffer);\n        buffer = '';\n      }\n    } else {\n      buffer += char;\n    }\n  }\n\n  if (buffer) {\n    path.push(buffer);\n  }\n\n  switch (path.length) {\n    case 1:\n      return {\n        name: path[0],\n        schema: null,\n        database: null\n      };\n\n    case 2:\n      return {\n        name: path[1],\n        schema: path[0],\n        database: null\n      };\n\n    case 3:\n      return {\n        name: path[2],\n        schema: path[1],\n        database: path[0]\n      };\n\n    default:\n      throw new Error('Invalid table name.');\n  }\n};\n\nmodule.exports = Table;","map":null,"metadata":{},"sourceType":"script"}