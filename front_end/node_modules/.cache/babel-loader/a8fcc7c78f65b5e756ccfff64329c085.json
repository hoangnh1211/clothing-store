{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst validator = _.cloneDeep(require('validator'));\n\nconst moment = require('moment');\n\nconst extensions = {\n  extend(name, fn) {\n    this[name] = fn;\n    return this;\n  },\n\n  notEmpty(str) {\n    return !str.match(/^[\\s\\t\\r\\n]*$/);\n  },\n\n  len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n\n  isUrl(str) {\n    return this.isURL(str);\n  },\n\n  isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n\n  isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n\n  notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n\n  regex(str, pattern, modifiers) {\n    str += '';\n\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== 'RegExp') {\n      pattern = new RegExp(pattern, modifiers);\n    }\n\n    return str.match(pattern);\n  },\n\n  notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n\n  isDecimal(str) {\n    return str !== '' && !!str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/);\n  },\n\n  min(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n\n  max(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n\n  not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n\n  contains(str, elem) {\n    return !!elem && str.includes(elem);\n  },\n\n  notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n\n  is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n\n};\nexports.extensions = extensions; // instance based validators\n\nvalidator.isImmutable = function (value, validatorArgs, field, modelInstance) {\n  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n}; // extra validators\n\n\nvalidator.notNull = function (val) {\n  return val !== null && val !== undefined;\n}; // https://github.com/chriso/validator.js/blob/6.2.0/validator.js\n\n\n_.forEach(extensions, (extend, key) => {\n  validator[key] = extend;\n}); // map isNull to isEmpty\n// https://github.com/chriso/validator.js/commit/e33d38a26ee2f9666b319adb67c7fc0d3dea7125\n\n\nvalidator.isNull = validator.isEmpty; // isDate removed in 7.0.0\n// https://github.com/chriso/validator.js/commit/095509fc707a4dc0e99f85131df1176ad6389fc9\n\nvalidator.isDate = function (dateString) {\n  // avoid http://momentjs.com/guides/#/warnings/js-date/\n  // by doing a preliminary check on `dateString`\n  const parsed = Date.parse(dateString);\n\n  if (isNaN(parsed)) {\n    // fail if we can't parse it\n    return false;\n  } // otherwise convert to ISO 8601 as moment prefers\n  // http://momentjs.com/docs/#/parsing/string/\n\n\n  const date = new Date(parsed);\n  return moment(date.toISOString()).isValid();\n};\n\nexports.validator = validator;","map":null,"metadata":{},"sourceType":"script"}