{"ast":null,"code":"module.exports = GeometryCollection;\n\nvar util = require('util');\n\nvar Types = require('./types');\n\nvar Geometry = require('./geometry');\n\nvar BinaryWriter = require('./binarywriter');\n\nfunction GeometryCollection(geometries, srid) {\n  Geometry.call(this);\n  this.geometries = geometries || [];\n  this.srid = srid;\n\n  if (this.geometries.length > 0) {\n    this.hasZ = this.geometries[0].hasZ;\n    this.hasM = this.geometries[0].hasM;\n  }\n}\n\nutil.inherits(GeometryCollection, Geometry);\n\nGeometryCollection.Z = function (geometries, srid) {\n  var geometryCollection = new GeometryCollection(geometries, srid);\n  geometryCollection.hasZ = true;\n  return geometryCollection;\n};\n\nGeometryCollection.M = function (geometries, srid) {\n  var geometryCollection = new GeometryCollection(geometries, srid);\n  geometryCollection.hasM = true;\n  return geometryCollection;\n};\n\nGeometryCollection.ZM = function (geometries, srid) {\n  var geometryCollection = new GeometryCollection(geometries, srid);\n  geometryCollection.hasZ = true;\n  geometryCollection.hasM = true;\n  return geometryCollection;\n};\n\nGeometryCollection._parseWkt = function (value, options) {\n  var geometryCollection = new GeometryCollection();\n  geometryCollection.srid = options.srid;\n  geometryCollection.hasZ = options.hasZ;\n  geometryCollection.hasM = options.hasM;\n  if (value.isMatch(['EMPTY'])) return geometryCollection;\n  value.expectGroupStart();\n\n  do {\n    geometryCollection.geometries.push(Geometry.parse(value));\n  } while (value.isMatch([',']));\n\n  value.expectGroupEnd();\n  return geometryCollection;\n};\n\nGeometryCollection._parseWkb = function (value, options) {\n  var geometryCollection = new GeometryCollection();\n  geometryCollection.srid = options.srid;\n  geometryCollection.hasZ = options.hasZ;\n  geometryCollection.hasM = options.hasM;\n  var geometryCount = value.readUInt32();\n\n  for (var i = 0; i < geometryCount; i++) geometryCollection.geometries.push(Geometry.parse(value, options));\n\n  return geometryCollection;\n};\n\nGeometryCollection._parseTwkb = function (value, options) {\n  var geometryCollection = new GeometryCollection();\n  geometryCollection.hasZ = options.hasZ;\n  geometryCollection.hasM = options.hasM;\n  if (options.isEmpty) return geometryCollection;\n  var geometryCount = value.readVarInt();\n\n  for (var i = 0; i < geometryCount; i++) geometryCollection.geometries.push(Geometry.parseTwkb(value));\n\n  return geometryCollection;\n};\n\nGeometryCollection._parseGeoJSON = function (value) {\n  var geometryCollection = new GeometryCollection();\n\n  for (var i = 0; i < value.geometries.length; i++) geometryCollection.geometries.push(Geometry._parseGeoJSON(value.geometries[i], true));\n\n  if (geometryCollection.geometries.length > 0) geometryCollection.hasZ = geometryCollection.geometries[0].hasZ;\n  return geometryCollection;\n};\n\nGeometryCollection.prototype.toWkt = function () {\n  if (this.geometries.length === 0) return this._getWktType(Types.wkt.GeometryCollection, true);\n  var wkt = this._getWktType(Types.wkt.GeometryCollection, false) + '(';\n\n  for (var i = 0; i < this.geometries.length; i++) wkt += this.geometries[i].toWkt() + ',';\n\n  wkt = wkt.slice(0, -1);\n  wkt += ')';\n  return wkt;\n};\n\nGeometryCollection.prototype.toWkb = function () {\n  var wkb = new BinaryWriter(this._getWkbSize());\n  wkb.writeInt8(1);\n\n  this._writeWkbType(wkb, Types.wkb.GeometryCollection);\n\n  wkb.writeUInt32LE(this.geometries.length);\n\n  for (var i = 0; i < this.geometries.length; i++) wkb.writeBuffer(this.geometries[i].toWkb({\n    srid: this.srid\n  }));\n\n  return wkb.buffer;\n};\n\nGeometryCollection.prototype.toTwkb = function () {\n  var twkb = new BinaryWriter(0, true);\n  var precision = Geometry.getTwkbPrecision(5, 0, 0);\n  var isEmpty = this.geometries.length === 0;\n\n  this._writeTwkbHeader(twkb, Types.wkb.GeometryCollection, precision, isEmpty);\n\n  if (this.geometries.length > 0) {\n    twkb.writeVarInt(this.geometries.length);\n\n    for (var i = 0; i < this.geometries.length; i++) twkb.writeBuffer(this.geometries[i].toTwkb());\n  }\n\n  return twkb.buffer;\n};\n\nGeometryCollection.prototype._getWkbSize = function () {\n  var size = 1 + 4 + 4;\n\n  for (var i = 0; i < this.geometries.length; i++) size += this.geometries[i]._getWkbSize();\n\n  return size;\n};\n\nGeometryCollection.prototype.toGeoJSON = function (options) {\n  var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\n  geoJSON.type = Types.geoJSON.GeometryCollection;\n  geoJSON.geometries = [];\n\n  for (var i = 0; i < this.geometries.length; i++) geoJSON.geometries.push(this.geometries[i].toGeoJSON());\n\n  return geoJSON;\n};","map":null,"metadata":{},"sourceType":"script"}