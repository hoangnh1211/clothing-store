{"ast":null,"code":"'use strict';\n/**\n Returns an object that treats MySQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\nconst Promise = require('../../promise');\n\nconst sequelizeErrors = require('../../errors');\n/**\n A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n\n @param  {QueryInterface} qi\n @param  {string} tableName     The name of the table.\n @param  {string} columnName    The name of the attribute that we want to remove.\n @param  {Object} options\n\n @private\n */\n\n\nfunction removeColumn(qi, tableName, columnName, options) {\n  options = options || {};\n  return qi.sequelize.query(qi.QueryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n    tableName,\n    schema: qi.sequelize.config.database\n  }, columnName), Object.assign({\n    raw: true\n  }, options)).then(([results]) => {\n    //Exclude primary key constraint\n    if (!results.length || results[0].constraint_name === 'PRIMARY') {\n      // No foreign key constraints found, so we can remove the column\n      return;\n    }\n\n    return Promise.map(results, constraint => qi.sequelize.query(qi.QueryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), Object.assign({\n      raw: true\n    }, options)));\n  }).then(() => qi.sequelize.query(qi.QueryGenerator.removeColumnQuery(tableName, columnName), Object.assign({\n    raw: true\n  }, options)));\n}\n/**\n * @param {QueryInterface} qi\n * @param {string} tableName\n * @param {string} constraintName\n * @param {Object} options\n *\n * @private\n */\n\n\nfunction removeConstraint(qi, tableName, constraintName, options) {\n  const sql = qi.QueryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n    tableName,\n    schema: qi.sequelize.config.database\n  }, constraintName);\n  return qi.sequelize.query(sql, Object.assign({}, options, {\n    type: qi.sequelize.QueryTypes.SHOWCONSTRAINTS\n  })).then(constraints => {\n    const constraint = constraints[0];\n    let query;\n\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: \"Constraint \".concat(constraintName, \" on table \").concat(tableName, \" does not exist\"),\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = qi.QueryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = qi.QueryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return qi.sequelize.query(query, options);\n  });\n}\n\nexports.removeConstraint = removeConstraint;\nexports.removeColumn = removeColumn;","map":null,"metadata":{},"sourceType":"script"}