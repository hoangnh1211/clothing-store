{"ast":null,"code":"\"use strict\";\n\nconst UTC_YEAR_ONE = Date.UTC(2000, 0, -730118);\nmodule.exports = {\n  id: 0x2B,\n  type: 'DATETIMEOFFSETN',\n  name: 'DateTimeOffset',\n  hasScale: true,\n  dataLengthLength: 1,\n  dataLengthFromScale: function dataLengthFromScale(scale) {\n    switch (scale) {\n      case 0:\n      case 1:\n      case 2:\n        return 3;\n\n      case 3:\n      case 4:\n        return 4;\n\n      case 5:\n      case 6:\n      case 7:\n        return 5;\n    }\n  },\n  declaration: function declaration(parameter) {\n    return 'datetimeoffset(' + this.resolveScale(parameter) + ')';\n  },\n  resolveScale: function resolveScale(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeUInt8(parameter.scale);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter) {\n    if (parameter.value != null) {\n      const time = new Date(+parameter.value);\n      time.setUTCFullYear(1970);\n      time.setUTCMonth(0);\n      time.setUTCDate(1);\n      let timestamp = time * Math.pow(10, parameter.scale - 3);\n      timestamp += (parameter.value.nanosecondDelta != null ? parameter.value.nanosecondDelta : 0) * Math.pow(10, parameter.scale);\n      timestamp = Math.round(timestamp);\n      const offset = -parameter.value.getTimezoneOffset();\n\n      switch (parameter.scale) {\n        case 0:\n        case 1:\n        case 2:\n          buffer.writeUInt8(8);\n          buffer.writeUInt24LE(timestamp);\n          break;\n\n        case 3:\n        case 4:\n          buffer.writeUInt8(9);\n          buffer.writeUInt32LE(timestamp);\n          break;\n\n        case 5:\n        case 6:\n        case 7:\n          buffer.writeUInt8(10);\n          buffer.writeUInt40LE(timestamp);\n      }\n\n      buffer.writeUInt24LE(Math.floor((+parameter.value - UTC_YEAR_ONE) / 86400000));\n      buffer.writeInt16LE(offset);\n    } else {\n      buffer.writeUInt8(0);\n    }\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = Date.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}