{"ast":null,"code":"\"use strict\";\n\nconst WritableTrackingBuffer = require('./tracking-buffer/writable-tracking-buffer');\n\nconst writeAllHeaders = require('./all-headers').writeToTrackingBuffer; // const OPTION = {\n//   WITH_RECOMPILE: 0x01,\n//   NO_METADATA: 0x02,\n//   REUSE_METADATA: 0x04\n// };\n\n\nconst STATUS = {\n  BY_REF_VALUE: 0x01,\n  DEFAULT_VALUE: 0x02\n};\n/*\n  s2.2.6.5\n */\n\nmodule.exports = class RpcRequestPayload {\n  constructor(request, txnDescriptor, options) {\n    this.request = request;\n    this.procedure = this.request.sqlTextOrProcedure;\n    const buffer = new WritableTrackingBuffer(500);\n\n    if (options.tdsVersion >= '7_2') {\n      const outstandingRequestCount = 1;\n      writeAllHeaders(buffer, txnDescriptor, outstandingRequestCount);\n    }\n\n    if (typeof this.procedure === 'string') {\n      buffer.writeUsVarchar(this.procedure);\n    } else {\n      buffer.writeUShort(0xFFFF);\n      buffer.writeUShort(this.procedure);\n    }\n\n    const optionFlags = 0;\n    buffer.writeUInt16LE(optionFlags);\n    const parameters = this.request.parameters;\n\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n      buffer.writeBVarchar('@' + parameter.name);\n      let statusFlags = 0;\n\n      if (parameter.output) {\n        statusFlags |= STATUS.BY_REF_VALUE;\n      }\n\n      buffer.writeUInt8(statusFlags);\n      const param = {\n        value: parameter.value\n      };\n      const type = parameter.type;\n\n      if ((type.id & 0x30) === 0x20) {\n        if (parameter.length) {\n          param.length = parameter.length;\n        } else if (type.resolveLength) {\n          param.length = type.resolveLength(parameter);\n        }\n      }\n\n      if (type.hasPrecision) {\n        if (parameter.precision) {\n          param.precision = parameter.precision;\n        } else if (type.resolvePrecision) {\n          param.precision = type.resolvePrecision(parameter);\n        }\n      }\n\n      if (type.hasScale) {\n        if (parameter.scale) {\n          param.scale = parameter.scale;\n        } else if (type.resolveScale) {\n          param.scale = type.resolveScale(parameter);\n        }\n      }\n\n      type.writeTypeInfo(buffer, param, options);\n      type.writeParameterData(buffer, param, options);\n    }\n\n    this.data = buffer.data;\n  }\n\n  toString(indent) {\n    indent || (indent = '');\n    return indent + ('RPC Request - ' + this.procedure);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}