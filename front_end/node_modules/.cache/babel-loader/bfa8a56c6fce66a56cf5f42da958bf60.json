{"ast":null,"code":"\"use strict\";\n\nconst NULL = (1 << 16) - 1;\nmodule.exports = {\n  id: 0xAD,\n  type: 'BIGBinary',\n  name: 'Binary',\n  dataLengthLength: 2,\n  maximumLength: 8000,\n  declaration: function declaration(parameter) {\n    var length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (parameter.value != null) {\n      length = parameter.value.length || 1;\n    } else if (parameter.value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    return 'binary(' + length + ')';\n  },\n  resolveLength: function resolveLength(parameter) {\n    if (parameter.value != null) {\n      return parameter.value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeUInt16LE(parameter.length);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter) {\n    if (parameter.value != null) {\n      buffer.writeUInt16LE(parameter.length);\n      buffer.writeBuffer(parameter.value.slice(0, Math.min(parameter.length, this.maximumLength)));\n    } else {\n      buffer.writeUInt16LE(NULL);\n    }\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      return new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}