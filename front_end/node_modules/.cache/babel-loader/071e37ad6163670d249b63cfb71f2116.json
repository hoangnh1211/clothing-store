{"ast":null,"code":"\"use strict\";\n\nconst sprintf = require('sprintf-js').sprintf;\n\nconst FLAGS_1 = {\n  ENDIAN_LITTLE: 0x00,\n  ENDIAN_BIG: 0x01,\n  CHARSET_ASCII: 0x00,\n  CHARSET_EBCDIC: 0x02,\n  FLOAT_IEEE_754: 0x00,\n  FLOAT_VAX: 0x04,\n  FLOAT_ND5000: 0x08,\n  BCP_DUMPLOAD_ON: 0x00,\n  BCP_DUMPLOAD_OFF: 0x10,\n  USE_DB_ON: 0x00,\n  USE_DB_OFF: 0x20,\n  INIT_DB_WARN: 0x00,\n  INIT_DB_FATAL: 0x40,\n  SET_LANG_WARN_OFF: 0x00,\n  SET_LANG_WARN_ON: 0x80\n};\nconst FLAGS_2 = {\n  INIT_LANG_WARN: 0x00,\n  INIT_LANG_FATAL: 0x01,\n  ODBC_OFF: 0x00,\n  ODBC_ON: 0x02,\n  F_TRAN_BOUNDARY: 0x04,\n  F_CACHE_CONNECT: 0x08,\n  USER_NORMAL: 0x00,\n  USER_SERVER: 0x10,\n  USER_REMUSER: 0x20,\n  USER_SQLREPL: 0x40,\n  INTEGRATED_SECURITY_OFF: 0x00,\n  INTEGRATED_SECURITY_ON: 0x80\n};\nconst TYPE_FLAGS = {\n  SQL_DFLT: 0x00,\n  SQL_TSQL: 0x08,\n  OLEDB_OFF: 0x00,\n  OLEDB_ON: 0x10,\n  READ_WRITE_INTENT: 0x00,\n  READ_ONLY_INTENT: 0x20\n};\nconst FLAGS_3 = {\n  CHANGE_PASSWORD_NO: 0x00,\n  CHANGE_PASSWORD_YES: 0x01,\n  BINARY_XML: 0x02,\n  SPAWN_USER_INSTANCE: 0x04,\n  UNKNOWN_COLLATION_HANDLING: 0x08,\n  EXTENSION_USED: 0x10\n};\nconst FEDAUTH_OPTIONS = {\n  FEATURE_ID: 0x02,\n  LIBRARY_SECURITYTOKEN: 0x01,\n  LIBRARY_ADAL: 0x02,\n  FEDAUTH_YES_ECHO: 0x01,\n  FEDAUTH_NO_ECHO: 0x00,\n  ADAL_WORKFLOW_USER_PASS: 0x01,\n  ADAL_WORKFLOW_INTEGRATED: 0x02\n};\nconst FEATURE_EXT_TERMINATOR = 0xFF;\n/*\n  s2.2.6.3\n */\n\nclass Login7Payload {\n  constructor({\n    tdsVersion,\n    packetSize,\n    clientProgVer,\n    clientPid,\n    connectionId,\n    clientTimeZone,\n    clientLcid\n  }) {\n    this.tdsVersion = tdsVersion;\n    this.packetSize = packetSize;\n    this.clientProgVer = clientProgVer;\n    this.clientPid = clientPid;\n    this.connectionId = connectionId;\n    this.clientTimeZone = clientTimeZone;\n    this.clientLcid = clientLcid;\n    this.readOnlyIntent = false;\n    this.initDbFatal = false;\n    this.fedAuth = undefined;\n    this.userName = undefined;\n    this.password = undefined;\n    this.serverName = undefined;\n    this.appName = undefined;\n    this.hostname = undefined;\n    this.libraryName = undefined;\n    this.language = undefined;\n    this.database = undefined;\n    this.clientId = undefined;\n    this.sspi = undefined;\n    this.attachDbFile = undefined;\n    this.changePassword = undefined;\n  }\n\n  toBuffer() {\n    const fixedData = Buffer.alloc(94);\n    const buffers = [fixedData];\n    let offset = 0,\n        dataOffset = fixedData.length; // Length: 4-byte\n\n    offset = fixedData.writeUInt32LE(0, offset); // TDSVersion: 4-byte\n\n    offset = fixedData.writeUInt32LE(this.tdsVersion, offset); // PacketSize: 4-byte\n\n    offset = fixedData.writeUInt32LE(this.packetSize, offset); // ClientProgVer: 4-byte\n\n    offset = fixedData.writeUInt32LE(this.clientProgVer, offset); // ClientPID: 4-byte\n\n    offset = fixedData.writeUInt32LE(this.clientPid, offset); // ConnectionID: 4-byte\n\n    offset = fixedData.writeUInt32LE(this.connectionId, offset); // OptionFlags1: 1-byte\n\n    offset = fixedData.writeUInt8(this.buildOptionFlags1(), offset); // OptionFlags2: 1-byte\n\n    offset = fixedData.writeUInt8(this.buildOptionFlags2(), offset); // TypeFlags: 1-byte\n\n    offset = fixedData.writeUInt8(this.buildTypeFlags(), offset); // OptionFlags3: 1-byte\n\n    offset = fixedData.writeUInt8(this.buildOptionFlags3(), offset); // ClientTimZone: 4-byte\n\n    offset = fixedData.writeInt32LE(this.clientTimeZone, offset); // ClientLCID: 4-byte\n\n    offset = fixedData.writeUInt32LE(this.clientLcid, offset); // ibHostName: 2-byte\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchHostName: 2-byte\n\n    if (this.hostname) {\n      const buffer = Buffer.from(this.hostname, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(dataOffset, offset);\n    } // ibUserName: 2-byte\n\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchUserName: 2-byte\n\n    if (this.userName) {\n      const buffer = Buffer.from(this.userName, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // ibPassword: 2-byte\n\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchPassword: 2-byte\n\n    if (this.password) {\n      const buffer = Buffer.from(this.password, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(this.scramblePassword(buffer));\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // ibAppName: 2-byte\n\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchAppName: 2-byte\n\n    if (this.appName) {\n      const buffer = Buffer.from(this.appName, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // ibServerName: 2-byte\n\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchServerName: 2-byte\n\n    if (this.serverName) {\n      const buffer = Buffer.from(this.serverName, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // (ibUnused / ibExtension): 2-byte\n\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // (cchUnused / cbExtension): 2-byte\n\n    const extensions = this.buildFeatureExt();\n    offset = fixedData.writeUInt16LE(4, offset);\n    const extensionOffset = Buffer.alloc(4);\n    extensionOffset.writeUInt32LE(dataOffset += 4, 0);\n    dataOffset += extensions.length;\n    buffers.push(extensionOffset, extensions); // ibCltIntName: 2-byte\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchCltIntName: 2-byte\n\n    if (this.libraryName) {\n      const buffer = Buffer.from(this.libraryName, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // ibLanguage: 2-byte\n\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchLanguage: 2-byte\n\n    if (this.language) {\n      const buffer = Buffer.from(this.language, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // ibDatabase: 2-byte\n\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchDatabase: 2-byte\n\n    if (this.database) {\n      const buffer = Buffer.from(this.database, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // ClientID: 6-byte\n\n\n    if (this.clientId) {\n      this.clientId.copy(fixedData, offset, 0, 6);\n    }\n\n    offset += 6; // ibSSPI: 2-byte\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cbSSPI: 2-byte\n\n    if (this.sspi) {\n      if (this.sspi.length > 65535) {\n        offset = fixedData.writeUInt16LE(65535, offset);\n      } else {\n        offset = fixedData.writeUInt16LE(this.sspi.length, offset);\n      }\n\n      buffers.push(this.sspi);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // ibAtchDBFile: 2-byte\n\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchAtchDBFile: 2-byte\n\n    if (this.attachDbFile) {\n      const buffer = Buffer.from(this.attachDbFile, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // ibChangePassword: 2-byte\n\n\n    offset = fixedData.writeUInt16LE(dataOffset, offset); // cchChangePassword: 2-byte\n\n    if (this.changePassword) {\n      const buffer = Buffer.from(this.changePassword, 'ucs2');\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    } // cbSSPILong: 4-byte\n\n\n    if (this.sspi && this.sspi.length > 65535) {\n      fixedData.writeUInt32LE(this.sspi.length, offset);\n    } else {\n      fixedData.writeUInt32LE(0, offset);\n    }\n\n    const data = Buffer.concat(buffers);\n    data.writeUInt32LE(data.length, 0);\n    return data;\n  }\n\n  buildOptionFlags1() {\n    let flags1 = FLAGS_1.ENDIAN_LITTLE | FLAGS_1.CHARSET_ASCII | FLAGS_1.FLOAT_IEEE_754 | FLAGS_1.BCP_DUMPLOAD_OFF | FLAGS_1.USE_DB_OFF | FLAGS_1.SET_LANG_WARN_ON;\n\n    if (this.initDbFatal) {\n      flags1 |= FLAGS_1.INIT_DB_FATAL;\n    } else {\n      flags1 |= FLAGS_1.INIT_DB_WARN;\n    }\n\n    return flags1;\n  }\n\n  buildFeatureExt() {\n    const buffers = [];\n    const fedAuth = this.fedAuth;\n\n    if (fedAuth) {\n      switch (fedAuth.type) {\n        case 'ADAL':\n          const buffer = Buffer.alloc(7);\n          buffer.writeUInt8(FEDAUTH_OPTIONS.FEATURE_ID, 0);\n          buffer.writeUInt32LE(2, 1);\n          buffer.writeUInt8(FEDAUTH_OPTIONS.LIBRARY_ADAL << 1 | (fedAuth.echo ? FEDAUTH_OPTIONS.FEDAUTH_YES_ECHO : FEDAUTH_OPTIONS.FEDAUTH_NO_ECHO), 5);\n          buffer.writeUInt8(fedAuth.workflow == 'integrated' ? 0x02 : FEDAUTH_OPTIONS.ADAL_WORKFLOW_USER_PASS, 6);\n          buffers.push(buffer);\n      }\n    }\n\n    buffers.push(Buffer.from([FEATURE_EXT_TERMINATOR]));\n    return Buffer.concat(buffers);\n  }\n\n  buildOptionFlags2() {\n    let flags2 = FLAGS_2.INIT_LANG_WARN | FLAGS_2.ODBC_OFF | FLAGS_2.USER_NORMAL;\n\n    if (this.sspi) {\n      flags2 |= FLAGS_2.INTEGRATED_SECURITY_ON;\n    } else {\n      flags2 |= FLAGS_2.INTEGRATED_SECURITY_OFF;\n    }\n\n    return flags2;\n  }\n\n  buildTypeFlags() {\n    let typeFlags = TYPE_FLAGS.SQL_DFLT | TYPE_FLAGS.OLEDB_OFF;\n\n    if (this.readOnlyIntent) {\n      typeFlags |= TYPE_FLAGS.READ_ONLY_INTENT;\n    } else {\n      typeFlags |= TYPE_FLAGS.READ_WRITE_INTENT;\n    }\n\n    return typeFlags;\n  }\n\n  buildOptionFlags3() {\n    return FLAGS_3.CHANGE_PASSWORD_NO | FLAGS_3.UNKNOWN_COLLATION_HANDLING | FLAGS_3.EXTENSION_USED;\n  }\n\n  scramblePassword(password) {\n    for (let b = 0, len = password.length; b < len; b++) {\n      let byte = password[b];\n      const lowNibble = byte & 0x0f;\n      const highNibble = byte >> 4;\n      byte = lowNibble << 4 | highNibble;\n      byte = byte ^ 0xa5;\n      password[b] = byte;\n    }\n\n    return password;\n  }\n\n  toString(indent = '') {\n    return indent + 'Login7 - ' + sprintf('TDS:0x%08X, PacketSize:0x%08X, ClientProgVer:0x%08X, ClientPID:0x%08X, ConnectionID:0x%08X', this.tdsVersion, this.packetSize, this.clientProgVer, this.clientPid, this.connectionId) + '\\n' + indent + '         ' + sprintf('Flags1:0x%02X, Flags2:0x%02X, TypeFlags:0x%02X, Flags3:0x%02X, ClientTimezone:%d, ClientLCID:0x%08X', this.buildOptionFlags1(), this.buildOptionFlags2(), this.buildTypeFlags(), this.buildOptionFlags3(), this.clientTimeZone, this.clientLcid) + '\\n' + indent + '         ' + sprintf(\"Hostname:'%s', Username:'%s', Password:'%s', AppName:'%s', ServerName:'%s', LibraryName:'%s'\", this.hostname, this.userName, this.password, this.appName, this.serverName, this.libraryName) + '\\n' + indent + '         ' + sprintf(\"Language:'%s', Database:'%s', SSPI:'%s', AttachDbFile:'%s', ChangePassword:'%s'\", this.language, this.database, this.sspi, this.attachDbFile, this.changePassword);\n  }\n\n}\n\nmodule.exports = Login7Payload;","map":null,"metadata":{},"sourceType":"script"}