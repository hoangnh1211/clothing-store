{"ast":null,"code":"\"use strict\";\n\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nmodule.exports = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  hasCollation: true,\n  dataLengthLength: 2,\n  maximumLength: 4000,\n  declaration: function declaration(parameter) {\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (parameter.value != null) {\n      length = parameter.value.toString().length || 1;\n    } else if (parameter.value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n  resolveLength: function resolveLength(parameter) {\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (parameter.value != null) {\n      if (Buffer.isBuffer(parameter.value)) {\n        return parameter.value.length / 2 || 1;\n      } else {\n        return parameter.value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length * 2);\n    } else {\n      buffer.writeUInt16LE(MAX);\n    }\n\n    buffer.writeBuffer(Buffer.from([0x00, 0x00, 0x00, 0x00, 0x00]));\n  },\n  writeParameterData: function writeParameterData(buffer, parameter) {\n    if (parameter.value != null) {\n      if (parameter.length <= this.maximumLength) {\n        buffer.writeUsVarbyte(parameter.value, 'ucs2');\n      } else {\n        buffer.writePLPBody(parameter.value, 'ucs2');\n      }\n    } else {\n      if (parameter.length <= this.maximumLength) {\n        buffer.writeUInt16LE(NULL);\n      } else {\n        buffer.writeUInt32LE(0xFFFFFFFF);\n        buffer.writeUInt32LE(0xFFFFFFFF);\n      }\n    }\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        return TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}