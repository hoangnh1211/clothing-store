{"ast":null,"code":"\"use strict\";\n\nconst metadataParse = require('../metadata-parser');\n\nfunction readTableName(parser, options, metadata, callback) {\n  if (metadata.type.hasTableName) {\n    if (options.tdsVersion >= '7_2') {\n      parser.readUInt8(numberOfTableNameParts => {\n        const tableName = [];\n        let i = 0;\n\n        function next(done) {\n          if (numberOfTableNameParts === i) {\n            return done();\n          }\n\n          parser.readUsVarChar(part => {\n            tableName.push(part);\n            i++;\n            next(done);\n          });\n        }\n\n        next(() => {\n          callback(tableName);\n        });\n      });\n    } else {\n      parser.readUsVarChar(callback);\n    }\n  } else {\n    callback(undefined);\n  }\n}\n\nfunction readColumnName(parser, options, index, metadata, callback) {\n  parser.readBVarChar(colName => {\n    if (options.columnNameReplacer) {\n      callback(options.columnNameReplacer(colName, index, metadata));\n    } else if (options.camelCaseColumns) {\n      callback(colName.replace(/^[A-Z]/, function (s) {\n        return s.toLowerCase();\n      }));\n    } else {\n      callback(colName);\n    }\n  });\n}\n\nfunction readColumn(parser, options, index, callback) {\n  metadataParse(parser, options, metadata => {\n    readTableName(parser, options, metadata, tableName => {\n      readColumnName(parser, options, index, metadata, colName => {\n        callback({\n          userType: metadata.userType,\n          flags: metadata.flags,\n          type: metadata.type,\n          colName: colName,\n          collation: metadata.collation,\n          precision: metadata.precision,\n          scale: metadata.scale,\n          udtInfo: metadata.udtInfo,\n          dataLength: metadata.dataLength,\n          tableName: tableName\n        });\n      });\n    });\n  });\n}\n\nmodule.exports = function (parser, colMetadata, options, callback) {\n  parser.readUInt16LE(columnCount => {\n    const columns = [];\n    let i = 0;\n\n    function next(done) {\n      if (i === columnCount) {\n        return done();\n      }\n\n      readColumn(parser, options, i, column => {\n        columns.push(column);\n        i++;\n        next(done);\n      });\n    }\n\n    next(() => {\n      callback({\n        name: 'COLMETADATA',\n        event: 'columnMetadata',\n        columns: columns\n      });\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}