{"ast":null,"code":"/**\n * big-number.js -> Arithmetic operations on big integers\n * Pure javascript implementation, no external libraries needed\n * Copyright(c) 2012-2018 Alex Bardas <alex.bardas@gmail.com>\n * MIT Licensed\n * It supports the following operations:\n *      addition, subtraction, multiplication, division, power, absolute value\n * It works with both positive and negative integers\n */\n!function () {\n  'use strict'; // Helper function which tests if a given character is a digit\n\n  var testDigit = function (digit) {\n    return /^\\d$/.test(digit);\n  }; // Helper function which returns the absolute value of a given number\n\n\n  var abs = function (number) {\n    var bigNumber;\n\n    if (typeof number === 'undefined') {\n      return;\n    }\n\n    bigNumber = BigNumber(number);\n    bigNumber.sign = 1;\n    return bigNumber;\n  }; // Check if argument is valid array\n\n\n  var isArray = function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n\n  var errors = {\n    'invalid': 'Invalid Number',\n    'division by zero': 'Invalid Number - Division By Zero'\n  }; // Constructor function which creates a new BigNumber object\n  // from an integer, a string, an array or other BigNumber object\n\n  function BigNumber(initialNumber) {\n    var index;\n\n    if (!(this instanceof BigNumber)) {\n      return new BigNumber(initialNumber);\n    }\n\n    this.number = [];\n    this.sign = 1;\n    this.rest = 0;\n\n    if (!initialNumber) {\n      this.number = [0];\n      return;\n    } // The initial number can be an array or object\n    // e.g. array     : [3,2,1], ['+',3,2,1], ['-',3,2,1]\n    //      number    : 312\n    //      string    : '321', '+321', -321'\n    //      BigNumber : BigNumber(321)\n    // Every character except the first must be a digit\n\n\n    if (isArray(initialNumber)) {\n      if (initialNumber.length && initialNumber[0] === '-' || initialNumber[0] === '+') {\n        this.sign = initialNumber[0] === '+' ? 1 : -1;\n        initialNumber.shift(0);\n      }\n\n      for (index = initialNumber.length - 1; index >= 0; index--) {\n        if (!this.addDigit(initialNumber[index])) return;\n      }\n    } else {\n      initialNumber = initialNumber.toString();\n\n      if (initialNumber.charAt(0) === '-' || initialNumber.charAt(0) === '+') {\n        this.sign = initialNumber.charAt(0) === '+' ? 1 : -1;\n        initialNumber = initialNumber.substring(1);\n      }\n\n      for (index = initialNumber.length - 1; index >= 0; index--) {\n        if (!this.addDigit(parseInt(initialNumber.charAt(index), 10))) {\n          return;\n        }\n      }\n    }\n  }\n\n  BigNumber.prototype.addDigit = function (digit) {\n    if (testDigit(digit)) {\n      this.number.push(digit);\n    } else {\n      this.number = errors['invalid'];\n      return false;\n    }\n\n    return this;\n  }; // returns:\n  //      0 if this.number === number\n  //      -1 if this.number < number\n  //      1 if this.number > number\n\n\n  BigNumber.prototype._compare = function (number) {\n    // if the function is called with no arguments then return 0\n    var bigNumber;\n    var index;\n\n    if (typeof number === 'undefined') {\n      return 0;\n    }\n\n    bigNumber = BigNumber(number); // If the numbers have different signs, then the positive\n    // number is greater\n\n    if (this.sign !== bigNumber.sign) {\n      return this.sign;\n    } // Else, check the length\n\n\n    if (this.number.length > bigNumber.number.length) {\n      return this.sign;\n    } else if (this.number.length < bigNumber.number.length) {\n      return this.sign * -1;\n    } // If they have similar length, compare the numbers\n    // digit by digit\n\n\n    for (index = this.number.length - 1; index >= 0; index--) {\n      if (this.number[index] > bigNumber.number[index]) {\n        return this.sign;\n      } else if (this.number[index] < bigNumber.number[index]) {\n        return this.sign * -1;\n      }\n    }\n\n    return 0;\n  }; // Greater than\n\n\n  BigNumber.prototype.gt = function (number) {\n    return this._compare(number) > 0;\n  }; // Greater than or equal\n\n\n  BigNumber.prototype.gte = function (number) {\n    return this._compare(number) >= 0;\n  }; // this.number equals n\n\n\n  BigNumber.prototype.equals = function (number) {\n    return this._compare(number) === 0;\n  }; // Less than or equal\n\n\n  BigNumber.prototype.lte = function (number) {\n    return this._compare(number) <= 0;\n  }; // Less than\n\n\n  BigNumber.prototype.lt = function (number) {\n    return this._compare(number) < 0;\n  }; // Addition\n\n\n  BigNumber.prototype.add = function (number) {\n    var bigNumber;\n\n    if (typeof number === 'undefined') {\n      return this;\n    }\n\n    bigNumber = BigNumber(number);\n\n    if (this.sign !== bigNumber.sign) {\n      if (this.sign > 0) {\n        bigNumber.sign = 1;\n        return this.minus(bigNumber);\n      } else {\n        this.sign = 1;\n        return bigNumber.minus(this);\n      }\n    }\n\n    this.number = BigNumber._add(this, bigNumber);\n    return this;\n  }; // Subtraction\n\n\n  BigNumber.prototype.subtract = function (number) {\n    var bigNumber;\n\n    if (typeof number === 'undefined') {\n      return this;\n    }\n\n    bigNumber = BigNumber(number);\n\n    if (this.sign !== bigNumber.sign) {\n      this.number = BigNumber._add(this, bigNumber);\n      return this;\n    } // If current number is lesser than the given bigNumber, the result will be negative\n\n\n    this.sign = this.lt(bigNumber) ? -1 : 1;\n    this.number = abs(this).lt(abs(bigNumber)) ? BigNumber._subtract(bigNumber, this) : BigNumber._subtract(this, bigNumber);\n    return this;\n  }; // adds two positive BigNumbers\n\n\n  BigNumber._add = function (a, b) {\n    var index;\n    var remainder = 0;\n    var length = Math.max(a.number.length, b.number.length);\n\n    for (index = 0; index < length || remainder > 0; index++) {\n      a.number[index] = (remainder += (a.number[index] || 0) + (b.number[index] || 0)) % 10;\n      remainder = Math.floor(remainder / 10);\n    }\n\n    return a.number;\n  }; // a - b\n  // a and b are 2 positive BigNumbers and a > b\n\n\n  BigNumber._subtract = function (a, b) {\n    var index;\n    var remainder = 0;\n    var length = a.number.length;\n\n    for (index = 0; index < length; index++) {\n      a.number[index] -= (b.number[index] || 0) + remainder;\n      a.number[index] += (remainder = a.number[index] < 0 ? 1 : 0) * 10;\n    } // Count the zeroes which will be removed\n\n\n    index = 0;\n    length = a.number.length - 1;\n\n    while (a.number[length - index] === 0 && length - index > 0) {\n      index++;\n    }\n\n    if (index > 0) {\n      a.number.splice(-index);\n    }\n\n    return a.number;\n  }; // this.number * number\n\n\n  BigNumber.prototype.multiply = function (number) {\n    if (typeof number === 'undefined') {\n      return this;\n    }\n\n    var bigNumber = BigNumber(number);\n    var index;\n    var givenNumberIndex;\n    var remainder = 0;\n    var result = [];\n\n    if (this.isZero() || bigNumber.isZero()) {\n      return BigNumber(0);\n    }\n\n    this.sign *= bigNumber.sign; // multiply the numbers\n\n    for (index = 0; index < this.number.length; index++) {\n      for (remainder = 0, givenNumberIndex = 0; givenNumberIndex < bigNumber.number.length || remainder > 0; givenNumberIndex++) {\n        result[index + givenNumberIndex] = (remainder += (result[index + givenNumberIndex] || 0) + this.number[index] * (bigNumber.number[givenNumberIndex] || 0)) % 10;\n        remainder = Math.floor(remainder / 10);\n      }\n    }\n\n    this.number = result;\n    return this;\n  }; // this.number / number\n\n\n  BigNumber.prototype.divide = function (number) {\n    if (typeof number === 'undefined') {\n      return this;\n    }\n\n    var bigNumber = BigNumber(number);\n    var index;\n    var length;\n    var result = [];\n    var rest = BigNumber(0); // test if one of the numbers is zero\n\n    if (bigNumber.isZero()) {\n      this.number = errors['division by zero'];\n      return this;\n    } else if (this.isZero()) {\n      return BigNumber(0);\n    }\n\n    this.sign *= bigNumber.sign;\n    bigNumber.sign = 1; // Skip division by 1\n\n    if (bigNumber.number.length === 1 && bigNumber.number[0] === 1) {\n      this.rest = BigNumber(0);\n      return this;\n    }\n\n    for (index = this.number.length - 1; index >= 0; index--) {\n      rest.multiply(10);\n      rest.number[0] = this.number[index];\n      result[index] = 0;\n\n      while (bigNumber.lte(rest)) {\n        result[index]++;\n        rest.subtract(bigNumber);\n      }\n    }\n\n    index = 0;\n    length = result.length - 1;\n\n    while (result[length - index] === 0 && length - index > 0) {\n      index++;\n    }\n\n    if (index > 0) {\n      result.splice(-index);\n    }\n\n    this.rest = rest;\n    this.number = result;\n    return this;\n  }; // this.number % number\n\n\n  BigNumber.prototype.mod = function (number) {\n    return this.divide(number).rest;\n  };\n\n  BigNumber.prototype.power = function (number) {\n    if (typeof number === 'undefined') return;\n    var bigNumber; // Convert the argument to a number\n\n    number = +number;\n\n    if (number === 0) {\n      return BigNumber(1);\n    }\n\n    if (number === 1) {\n      return this;\n    }\n\n    bigNumber = BigNumber(this);\n    this.number = [1];\n\n    while (number > 0) {\n      if (number % 2 === 1) {\n        this.multiply(bigNumber);\n        number--;\n        continue;\n      }\n\n      bigNumber.multiply(bigNumber);\n      number = Math.floor(number / 2);\n    }\n\n    return this;\n  }; // |this.number|\n\n\n  BigNumber.prototype.abs = function () {\n    this.sign = 1;\n    return this;\n  }; // Check if this.number is equal to 0\n\n\n  BigNumber.prototype.isZero = function () {\n    var index;\n\n    for (index = 0; index < this.number.length; index++) {\n      if (this.number[index] !== 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // this.number.toString()\n\n\n  BigNumber.prototype.toString = function () {\n    var index;\n    var str = '';\n\n    if (typeof this.number === 'string') {\n      return this.number;\n    }\n\n    for (index = this.number.length - 1; index >= 0; index--) {\n      str += this.number[index];\n    }\n\n    return this.sign > 0 ? str : '-' + str;\n  }; // Use shorcuts for functions names\n\n\n  BigNumber.prototype.plus = BigNumber.prototype.add;\n  BigNumber.prototype.minus = BigNumber.prototype.subtract;\n  BigNumber.prototype.div = BigNumber.prototype.divide;\n  BigNumber.prototype.mult = BigNumber.prototype.multiply;\n  BigNumber.prototype.pow = BigNumber.prototype.power;\n  BigNumber.prototype.val = BigNumber.prototype.toString; // CommonJS\n\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    module.exports = BigNumber;\n  } else if (typeof window !== 'undefined') {\n    window.BigNumber = BigNumber;\n  }\n}();","map":null,"metadata":{},"sourceType":"script"}