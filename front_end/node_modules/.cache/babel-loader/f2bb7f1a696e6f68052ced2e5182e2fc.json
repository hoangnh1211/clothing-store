{"ast":null,"code":"\"use strict\";\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst TYPES = require('./data-type').typeByName;\n\nconst RequestError = require('./errors').RequestError; // TODO: Figure out how to type the `rows` parameter here.\n\n\nclass Request extends EventEmitter {\n  // TODO: This should be `Connection`, not `any`.\n  constructor(sqlTextOrProcedure, callback) {\n    super();\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.originalParameters = [];\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n\n    this.callback = function (err) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback.apply(this, arguments);\n        this.emit('requestCompleted');\n      }\n    };\n  } // TODO: `type` must be a valid TDS value type\n\n\n  addParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: options.output || (options.output = false),\n      length: options.length,\n      precision: options.precision,\n      scale: options.scale\n    };\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  } // TODO: `type` must be a valid TDS value type\n\n\n  addOutputParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    options.output = true;\n    this.addParameter(name, type, value, options);\n  }\n\n  makeParamsParameter(parameters) {\n    let paramsParameter = '';\n\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n\n    return paramsParameter;\n  }\n\n  transformIntoExecuteSqlRpc() {\n    if (this.validateParameters()) {\n      return;\n    }\n\n    this.originalParameters = this.parameters;\n    this.parameters = [];\n    this.addParameter('statement', TYPES.NVarChar, this.sqlTextOrProcedure);\n\n    if (this.originalParameters.length) {\n      this.addParameter('params', TYPES.NVarChar, this.makeParamsParameter(this.originalParameters));\n    }\n\n    for (let i = 0, len = this.originalParameters.length; i < len; i++) {\n      const parameter = this.originalParameters[i];\n      this.parameters.push(parameter);\n    }\n\n    this.sqlTextOrProcedure = 'sp_executesql';\n  }\n\n  transformIntoPrepareRpc() {\n    this.originalParameters = this.parameters;\n    this.parameters = [];\n    this.addOutputParameter('handle', TYPES.Int);\n    this.addParameter('params', TYPES.NVarChar, this.makeParamsParameter(this.originalParameters));\n    this.addParameter('stmt', TYPES.NVarChar, this.sqlTextOrProcedure);\n    this.sqlTextOrProcedure = 'sp_prepare';\n    this.preparing = true;\n    this.on('returnValue', (name, value) => {\n      if (name === 'handle') {\n        this.handle = value;\n      } else {\n        this.error = RequestError(\"Tedious > Unexpected output parameter \".concat(name, \" from sp_prepare\"));\n      }\n    });\n  }\n\n  transformIntoUnprepareRpc() {\n    this.parameters = [];\n    this.addParameter('handle', TYPES.Int, this.handle);\n    this.sqlTextOrProcedure = 'sp_unprepare';\n  }\n\n  transformIntoExecuteRpc(parameters) {\n    this.parameters = [];\n    this.addParameter('handle', TYPES.Int, this.handle);\n\n    for (let i = 0, len = this.originalParameters.length; i < len; i++) {\n      const parameter = this.originalParameters[i];\n      parameter.value = parameters[parameter.name];\n      this.parameters.push(parameter);\n    }\n\n    if (this.validateParameters()) {\n      return;\n    }\n\n    this.sqlTextOrProcedure = 'sp_execute';\n  }\n\n  validateParameters() {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n      const value = parameter.type.validate(parameter.value);\n\n      if (value instanceof TypeError) {\n        return this.error = new RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + value.message, 'EPARAM');\n      }\n\n      parameter.value = value;\n    }\n\n    return null;\n  } // Temporarily suspends the flow of data from the database.\n  // No more 'row' events will be emitted until resume() is called.\n\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n\n    this.paused = true;\n\n    if (this.connection) {\n      this.connection.pauseRequest(this);\n    }\n  } // Resumes the flow of data from the database.\n\n\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n\n    this.paused = false;\n\n    if (this.connection) {\n      this.connection.resumeRequest(this);\n    }\n  }\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n\n}\n\nmodule.exports = Request;","map":null,"metadata":{},"sourceType":"script"}