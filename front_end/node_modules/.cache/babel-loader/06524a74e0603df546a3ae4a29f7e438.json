{"ast":null,"code":"module.exports = BinaryReader;\n\nfunction BinaryReader(buffer, isBigEndian) {\n  this.buffer = buffer;\n  this.position = 0;\n  this.isBigEndian = isBigEndian || false;\n}\n\nfunction _read(readLE, readBE, size) {\n  return function () {\n    var value;\n    if (this.isBigEndian) value = readBE.call(this.buffer, this.position);else value = readLE.call(this.buffer, this.position);\n    this.position += size;\n    return value;\n  };\n}\n\nBinaryReader.prototype.readUInt8 = _read(Buffer.prototype.readUInt8, Buffer.prototype.readUInt8, 1);\nBinaryReader.prototype.readUInt16 = _read(Buffer.prototype.readUInt16LE, Buffer.prototype.readUInt16BE, 2);\nBinaryReader.prototype.readUInt32 = _read(Buffer.prototype.readUInt32LE, Buffer.prototype.readUInt32BE, 4);\nBinaryReader.prototype.readInt8 = _read(Buffer.prototype.readInt8, Buffer.prototype.readInt8, 1);\nBinaryReader.prototype.readInt16 = _read(Buffer.prototype.readInt16LE, Buffer.prototype.readInt16BE, 2);\nBinaryReader.prototype.readInt32 = _read(Buffer.prototype.readInt32LE, Buffer.prototype.readInt32BE, 4);\nBinaryReader.prototype.readFloat = _read(Buffer.prototype.readFloatLE, Buffer.prototype.readFloatBE, 4);\nBinaryReader.prototype.readDouble = _read(Buffer.prototype.readDoubleLE, Buffer.prototype.readDoubleBE, 8);\n\nBinaryReader.prototype.readVarInt = function () {\n  var nextByte,\n      result = 0,\n      bytesRead = 0;\n\n  do {\n    nextByte = this.buffer[this.position + bytesRead];\n    result += (nextByte & 0x7F) << 7 * bytesRead;\n    bytesRead++;\n  } while (nextByte >= 0x80);\n\n  this.position += bytesRead;\n  return result;\n};","map":null,"metadata":{},"sourceType":"script"}