{"ast":null,"code":"\"use strict\";\n\nconst IntN = require('./intn');\n\nmodule.exports = {\n  id: 0x7F,\n  type: 'INT8',\n  name: 'BigInt',\n  declaration: function declaration() {\n    return 'bigint';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(IntN.id);\n    buffer.writeUInt8(8);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter) {\n    if (parameter.value != null) {\n      const val = typeof parameter.value !== 'number' ? parameter.value : parseInt(parameter.value);\n      buffer.writeUInt8(8);\n      buffer.writeInt64LE(val);\n    } else {\n      buffer.writeUInt8(0);\n    }\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < -9007199254740991 || value > 9007199254740991) {\n      // Number.MIN_SAFE_INTEGER = -9007199254740991\n      // Number.MAX_SAFE_INTEGER = 9007199254740991\n      // 9007199254740991 = (2**53) - 1\n      // Can't use Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER directly though\n      // as these constants are not available in node 0.10.\n      return new TypeError('Value must be between -9007199254740991 and 9007199254740991, inclusive.' + ' For bigger numbers, use VarChar type.');\n    }\n\n    return value;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}