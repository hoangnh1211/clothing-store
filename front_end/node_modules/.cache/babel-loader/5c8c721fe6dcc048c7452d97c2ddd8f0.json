{"ast":null,"code":"\"use strict\";\n\nconst DoublyLinkedList = require(\"./DoublyLinkedList\");\n\nconst DequeIterator = require(\"./DequeIterator\");\n/**\n * DoublyLinkedList backed double ended queue\n * implements just enough to keep the Pool\n */\n\n\nclass Deque {\n  constructor() {\n    this._list = new DoublyLinkedList();\n  }\n  /**\n   * removes and returns the first element from the queue\n   * @return {any} [description]\n   */\n\n\n  shift() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.head;\n\n    this._list.remove(node);\n\n    return node.data;\n  }\n  /**\n   * adds one elemts to the beginning of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n\n\n  unshift(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertBeginning(node);\n  }\n  /**\n   * adds one to the end of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n\n\n  push(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertEnd(node);\n  }\n  /**\n   * removes and returns the last element from the queue\n   */\n\n\n  pop() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.tail;\n\n    this._list.remove(node);\n\n    return node.data;\n  }\n\n  [Symbol.iterator]() {\n    return new DequeIterator(this._list);\n  }\n\n  iterator() {\n    return new DequeIterator(this._list);\n  }\n\n  reverseIterator() {\n    return new DequeIterator(this._list, true);\n  }\n  /**\n   * get a reference to the item at the head of the queue\n   * @return {any} [description]\n   */\n\n\n  get head() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.head;\n    return node.data;\n  }\n  /**\n   * get a reference to the item at the tail of the queue\n   * @return {any} [description]\n   */\n\n\n  get tail() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.tail;\n    return node.data;\n  }\n\n  get length() {\n    return this._list.length;\n  }\n\n}\n\nmodule.exports = Deque;","map":null,"metadata":{},"sourceType":"script"}