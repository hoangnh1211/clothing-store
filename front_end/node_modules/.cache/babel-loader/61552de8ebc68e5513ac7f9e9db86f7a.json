{"ast":null,"code":"'use strict';\n\nconst Promise = require('./promise');\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {@link Sequelize.transaction}\n */\n\n\nclass Transaction {\n  /**\n   * Creates a new transaction instance\n   *\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {Object} options An object with options\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = []; // get dialect specific transaction options\n\n    const generateTransactionId = this.sequelize.dialect.QueryGenerator.generateTransactionId;\n    this.options = Object.assign({\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false\n    }, options || {});\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = \"\".concat(this.id, \"-sp-\").concat(this.parent.savepoints.length);\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n  /**\n   * Commit the transaction\n   *\n   * @returns {Promise}\n   */\n\n\n  commit() {\n    if (this.finished) {\n      return Promise.reject(new Error(\"Transaction cannot be committed because it has been finished with state: \".concat(this.finished)));\n    }\n\n    this._clearCls();\n\n    return this.sequelize.getQueryInterface().commitTransaction(this, this.options).finally(() => {\n      this.finished = 'commit';\n\n      if (!this.parent) {\n        return this.cleanup();\n      }\n\n      return null;\n    }).tap(() => Promise.each(this._afterCommitHooks, hook => Promise.resolve(hook.apply(this, [this]))));\n  }\n  /**\n   * Rollback (abort) the transaction\n   *\n   * @returns {Promise}\n   */\n\n\n  rollback() {\n    if (this.finished) {\n      return Promise.reject(new Error(\"Transaction cannot be rolled back because it has been finished with state: \".concat(this.finished)));\n    }\n\n    if (!this.connection) {\n      return Promise.reject(new Error('Transaction cannot be rolled back because it never started'));\n    }\n\n    this._clearCls();\n\n    return this.sequelize.getQueryInterface().rollbackTransaction(this, this.options).finally(() => {\n      if (!this.parent) {\n        return this.cleanup();\n      }\n\n      return this;\n    });\n  }\n\n  prepareEnvironment(useCLS) {\n    let connectionPromise;\n\n    if (useCLS === undefined) {\n      useCLS = true;\n    }\n\n    if (this.parent) {\n      connectionPromise = Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = {\n        uuid: this.id\n      };\n\n      if (this.options.readOnly) {\n        acquireOptions.type = 'SELECT';\n      }\n\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    return connectionPromise.then(connection => {\n      this.connection = connection;\n      this.connection.uuid = this.id;\n    }).then(() => {\n      return this.begin().then(() => this.setDeferrable()).then(() => this.setIsolationLevel()).catch(setupErr => this.rollback().finally(() => {\n        throw setupErr;\n      }));\n    }).tap(() => {\n      if (useCLS && this.sequelize.constructor._cls) {\n        this.sequelize.constructor._cls.set('transaction', this);\n      }\n\n      return null;\n    });\n  }\n\n  begin() {\n    return this.sequelize.getQueryInterface().startTransaction(this, this.options);\n  }\n\n  setDeferrable() {\n    if (this.options.deferrable) {\n      return this.sequelize.getQueryInterface().deferConstraints(this, this.options);\n    }\n  }\n\n  setIsolationLevel() {\n    return this.sequelize.getQueryInterface().setIsolationLevel(this, this.options.isolationLevel, this.options);\n  }\n\n  cleanup() {\n    const res = this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = undefined;\n    return res;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get('transaction') === this) {\n        cls.set('transaction', null);\n      }\n    }\n  }\n  /**\n   * A hook that is run after a transaction is committed\n   *\n   * @param {Function} fn   A callback function that is called with the committed transaction\n   * @name afterCommit\n   * @memberof Sequelize.Transaction\n   */\n\n\n  afterCommit(fn) {\n    if (!fn || typeof fn !== 'function') {\n      throw new Error('\"fn\" must be a function');\n    }\n\n    this._afterCommitHooks.push(fn);\n  }\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * return sequelize.transaction({type: Sequelize.Transaction.TYPES.EXCLUSIVE}, transaction => {\n   *   // your transactions\n   * }).then(result => {\n   *   // transaction has been committed. Do something after the commit if required.\n   * }).catch(err => {\n   *   // do something with the err.\n   * });\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   */\n\n\n  static get TYPES() {\n    return {\n      DEFERRED: 'DEFERRED',\n      IMMEDIATE: 'IMMEDIATE',\n      EXCLUSIVE: 'EXCLUSIVE'\n    };\n  }\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * return sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *   // your transactions\n   * }).then(result => {\n   *   // transaction has been committed. Do something after the commit if required.\n   * }).catch(err => {\n   *   // do something with the err.\n   * });\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   */\n\n\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: 'READ UNCOMMITTED',\n      READ_COMMITTED: 'READ COMMITTED',\n      REPEATABLE_READ: 'REPEATABLE READ',\n      SERIALIZABLE: 'SERIALIZABLE'\n    };\n  }\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   *\n   * # UserModel will be locked but TaskModel won't!\n   *\n   * @example <caption>You can also skip locked rows:</caption>\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * # The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns {Object}\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   */\n\n\n  static get LOCK() {\n    return {\n      UPDATE: 'UPDATE',\n      SHARE: 'SHARE',\n      KEY_SHARE: 'KEY SHARE',\n      NO_KEY_UPDATE: 'NO KEY UPDATE'\n    };\n  }\n  /**\n   * Please see {@link Transaction.LOCK}\n   */\n\n\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;","map":null,"metadata":{},"sourceType":"script"}